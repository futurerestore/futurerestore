cmake_minimum_required(VERSION 3.22)
find_package(PkgConfig REQUIRED)
set(ignoreMe "${NO_PKGCFG}")
set(ignoreMe "${ASAN}")
set(ignoreMe "${ARCH}")
set(SUBPROJECT_BUILD 1)
set(ASAN_FLAG "")
if(DEFINED ASAN OR "$ENV{ASAN}" MATCHES "1")
    set(ASAN 1)
    set(ASAN_FLAG -fsanitize=address)
    set(CMAKE_C_LINK_LIBRARY_FLAG "${ASAN_FLAG}")
endif()
if("${CMAKE_HOST_SYSTEM_NAME}" MATCHES "Darwin")
    if(NOT DEFINED NO_XCODE AND NOT DEFINED ENV{NO_XCODE})
        execute_process(COMMAND xcrun --find clang WORKING_DIRECTORY "${CMAKE_SOURCE_DIR}" OUTPUT_VARIABLE CC OUTPUT_STRIP_TRAILING_WHITESPACE)
        execute_process(COMMAND xcrun --find clang++ WORKING_DIRECTORY "${CMAKE_SOURCE_DIR}" OUTPUT_VARIABLE CXX OUTPUT_STRIP_TRAILING_WHITESPACE)
        execute_process(COMMAND xcrun --find ar WORKING_DIRECTORY "${CMAKE_SOURCE_DIR}" OUTPUT_VARIABLE AR OUTPUT_STRIP_TRAILING_WHITESPACE)
        execute_process(COMMAND xcrun --find ld WORKING_DIRECTORY "${CMAKE_SOURCE_DIR}" OUTPUT_VARIABLE LD OUTPUT_STRIP_TRAILING_WHITESPACE)
        execute_process(COMMAND xcrun --show-sdk-path WORKING_DIRECTORY "${CMAKE_SOURCE_DIR}" OUTPUT_VARIABLE SYSROOT OUTPUT_STRIP_TRAILING_WHITESPACE)
        set(CMAKE_C_COMPILER "${CC}")
        set(CMAKE_CXX_COMPILER "${CXX}")
    endif()
    if(NOT DEFINED ARCH)
        set(ARCH "$ENV{ARCH}")
        if(ARCH STREQUAL "")
            set(ARCH "${CMAKE_SYSTEM_PROCESSOR}")
        endif()
    endif()
    if(NOT DEFINED MINVER OR NOT DEFINED "$ENV{MINVER}" AND DEFINED NO_PKGCFG AND "$ENV{NO_PKGCFG}" MATCHES "1")
        if("${ARCH}" STREQUAL "x86_64" OR "$ENV{ARCH}" STREQUAL "x86_64")
            set(MINVER -mmacosx-version-min=10.12)
            set(CMAKE_OSX_DEPLOYMENT_TARGET 10.12)
        else()
            set(MINVER -mmacosx-version-min=11.0)
            set(CMAKE_OSX_DEPLOYMENT_TARGET 11.0)
        endif()
    endif()
    set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -arch ${ARCH} -isysroot ${SYSROOT} ${MINVER} -fembed-bitcode=off -flto=thin -pthread -mrelax-all -std=gnu++20 ${ASAN_FLAG}")
    set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -arch ${ARCH} -isysroot ${SYSROOT} ${MINVER} -fembed-bitcode=off -flto=thin -pthread -mrelax-all -std=gnu17 ${ASAN_FLAG}")
elseif("${CMAKE_HOST_SYSTEM_NAME}" MATCHES "Linux")
    set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -Wl,--allow-multiple-definition -pthread -mrelax-all -std=gnu++20 ${ASAN_FLAG}")
    set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -Wl,--allow-multiple-definition -pthread -mrelax-all -std=gnu17 ${ASAN_FLAG}")
endif()
set(CMAKE_C_FLAGS_RELEASE "-Os -DNDEBUG")
set(CMAKE_CXX_FLAGS_RELEASE "-Os -DNDEBUG")
set(CMAKE_C_FLAGS_DEBUG "-g -O0 -DDEBUG")
set(CMAKE_CXX_FLAGS_DEBUG "-g -O0 -DDEBUG")
set(CMAKE_C_STANDARD 17)
set(CMAKE_CXX_STANDARD 20)
project(futurerestore)
add_subdirectory(external/tsschecker)
add_subdirectory(external/idevicerestore)
add_subdirectory(src)

