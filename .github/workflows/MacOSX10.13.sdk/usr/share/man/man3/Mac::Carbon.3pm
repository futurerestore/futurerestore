.\" Automatically generated by Pod::Man 2.27 (Pod::Simple 3.28)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Carbon 3"
.TH Carbon 3 "2009-09-28" "perl v5.18.2" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Mac::Carbon \- Access to Mac OS Carbon API
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 2
\&        use Mac::Carbon;
\&        use Mac::Carbon qw(:files :morefiles);
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This module provides documentation of the Mac::Carbon modules, and
acts as a frontend to them.
.PP
Mac::Carbon is a collection of perl modules for accessing the Carbon \s-1API\s0
under Mac \s-1OS X. \s0 It is a port of the Toolbox modules written by Matthias
Neeracher for MacPerl.
.PP
This module will load in all the Carbon modules, and export all of the
functions, constants, and other variables.  An export tag is set up for
each module, so they may be selected individually.
.PP
This module exists primarily because in Mac \s-1OS X,\s0 all the Carbon
functions are imported into a C program with a single header,
Carbon.h, so Mac \s-1OS X\s0 users may prefer to load in the entire Carbon
\&\s-1API\s0 with a single module.
.PP
For detailed information on the Carbon \s-1API \s0(highly recommended, as
a familiarity with Carbon is assumed in the \s-1POD\s0), see apple.com.
.PP
.Vb 1
\&        http://developer.apple.com/techpubs/macosx/Carbon/
.Ve
.PP
The documentation is also located on your system, if you have the Developer
Tools installed, at /Developer/Documentation/Carbon/.
.PP
Also of significant use are the related header files on your system.  Use
the `locate` command to find them.  They contain current documentation and
notes for the \s-1API.\s0
.PP
The modules were written for Mac \s-1OS\s0 originally, and are in part being
ported to Carbon.  You may also be interested in the original documentation.
.PP
.Vb 1
\&        http://developer.apple.com/techpubs/macos8/
.Ve
.SH "TOOLBOX MAPPINGS"
.IX Header "TOOLBOX MAPPINGS"
Swiped from Mac/Toolbox.pod in the MacPerl distribution.
.PP
The Macintosh Operating System provides a rich \s-1API\s0 with thousands of \fItoolbox\fR
calls. The MacPerl toolbox modules aim to make as much as possible of this
functionality available to MacPerl programmers. The mapping of the toolbox 
interfaces into MacPerl is intended to be
.IP "1." 4
Convenient to use for Perl programmers.
.IP "2." 4
As close as possible to the C interfaces.
.PP
This translates into a mapping strategy which is discussed in the following 
sections.
.SS "Function mappings"
.IX Subsection "Function mappings"
MacPerl toolbox calls take their input arguments in the same order as the 
corresponding toolbox functions. Output arguments are never passed by reference, 
but returned from the calls. If there are several output arguments, a list is
returned. If an error occurs, the function returns \f(CW\*(C`undef\*(C'\fR or \f(CW\*(C`()\*(C'\fR and the 
error code is available in the \f(CW$^E\fR variable.
.PP
.Vb 3
\&        $port = GetPort();
\&        SetPort($port);
\&        $desc = AECreateDesc("TEXT", "Hello, World") or die $^E;
.Ve
.SS "Data structure mappings"
.IX Subsection "Data structure mappings"
Complex data structures are mapped into blessed references. Data fields are 
available through member functions which return the value of a field if called
without an argument and change the value if called with an argument.
.PP
.Vb 3
\&        $rect = Rect\->new(10, 20, 110, 220);
\&        $rect\->top;
\&        $rect\->right(250);
.Ve
.SH "MAC OS X DIFFERENCES"
.IX Header "MAC OS X DIFFERENCES"
The modules follow the same \s-1API\s0 under Mac \s-1OS X\s0 as Mac \s-1OS,\s0 except that
the non-Carbon \s-1API\s0 is not supported (for example, \f(CW\*(C`NewHandle\*(C'\fR is
supported, but \f(CW\*(C`NewHandleSys\*(C'\fR is not).  Calling a function not
supported by Carbon will generate an exception.
.PP
In each module's documentation, functions that work only under Mac \s-1OS
\&\s0(non-Carbon) are marked with \fBMac \s-1OS\s0 only.\fR  Those that work only
under Mac \s-1OS X \s0(Carbon) are marked with \fBMac \s-1OS X\s0 only.\fR  A complete
list is at the end of this document.
.PP
The MacPerl package is automatically bootstrapped in MacPerl; it is
included here, though the app-specific functions (Reply, Quit) are not
supported, and the MacPerl package must be loaded explicitly (e.g.,
\&\f(CW\*(C`use MacPerl;\*(C'\fR).  Also, Ask/Answer/Pick are provided via AppleScript,
talking to the SystemUIServer process.
.PP
The Mac-specific error codes are put in \f(CW$^E\fR as in MacPerl, but \f(CW$^E\fR
does not automatically convert the numeric error into a string in string
context.  See brian d foy's Mac::Errors module on the \s-1CPAN\s0 for this:
.PP
.Vb 3
\&        use Mac::Errors \*(Aq$MacError\*(Aq;
\&        my $info1 = FSpGetCatInfo($file1) or die $^E + 0;    # error number
\&        my $info2 = FSpGetCatInfo($file2) or die $MacError;  # error string
.Ve
.PP
Mac::Errors is not included with or required by Mac::Carbon, but it is
highly recommended.
.PP
\&\f(CW$!\fR is set at the same time \f(CW$^E\fR is set.  This is different behavior
from MacPerl, but similar to other platforms.  On MacPerl, \f(CW$^E\fR is
signed, and on Unix it is unsigned, so to get the numeric value from
\&\f(CW$^E\fR, just add 0, as above.  Could be worse.
.PP
Files are passed back and forth using Unix/POSIX filespecs (if you care
about the gory details, a portion of the \s-1GUSI API\s0 has been reimplemented
here, and it handles the conversions).  Similarly, times are converted
back and forth from the Mac \s-1OS\s0 epoch to the Unix epoch.
.PP
The support functions are in \fICarbon.h\fR.  See that file for descriptions
of the issues, including bugs and possibilities for bugs, involved.
.SH "64\-BIT PERL"
.IX Header "64-BIT PERL"
Significant portions of the Carbon \s-1API\s0 are unavailable to 64\-bit programs on Mac
\&\s-1OS X. \s0 Perhaps a subset of the \s-1API\s0 could be made available to a 64\-bit perl
(for more information see Apple's \*(L"64\-Bit Guide for Carbon Developers\*(R"),
and might in the future, but it's simpler at this point to just run perl in
32\-bit mode.
.PP
There's a few ways to do this.  Most obviously, you could simply build a 32\-bit
perl.  I always build my own perl, and I just compile it for 32 bits.
.PP
There's also two methods mentioned in \*(L"man perl\*(R" under Mac \s-1OS X 10.6:\s0
you can set an environment variable, or set a system preference.  For the
environment use:
.PP
.Vb 1
\&        VERSIONER_PERL_PREFER_32_BIT=yes
.Ve
.PP
And for the system preference, execute this line in your terminal:
.PP
.Vb 1
\&        defaults write com.apple.versioner.perl Prefer\-32\-Bit \-bool yes
.Ve
.SH "INTEL ISSUES"
.IX Header "INTEL ISSUES"
There are very few issues on Intel.  They mostly center around the fact that
a Mac four-char-code is often treated as a string in Perl-space, but in C\-space
is an integer.  The conversion process results in various errors.
.PP
Four-char-code types include typeType, typeEnumerated, typeProperty,
typeKeyword, and typeApplSignature.
.PP
There are a few Don't Do Thats to keep in mind.
.IP "\(bu" 4
Don't change the type of an existing AEDesc; coerce it to a new desc instead,
with \fIAECoerceDesc()\fR.  This is generally good advice anyway.
.IP "\(bu" 4
Don't pass four-char-codes as arguments to AEBuild*; there's no easy way for
the called function to know what type the argument is going to be passed as,
and to fix the data before it is passed.  Four-char-codes can be literals
in AEBuild formats; this is a better method to use, when possible.  For example:
.Sp
.Vb 2
\&        AEBuild(q{\*(Aq\-\-\-\-\*(Aq:type(@)}, typeProperty);  # don\*(Aqt
\&        AEBuild(q{\*(Aq\-\-\-\-\*(Aq:type(prop)});             # do
.Ve
.IP "\(bu" 4
Similarly, when using AEStream, don't pass a four-char-code to \fIWriteData()\fR,
if you can avoid it.  Use one of the methods that allow type specification
(such as WriteDesc and WriteKeyDesc).
.IP "\(bu" 4
Don't try to parse binary data when you don't have to; use the \s-1API. \s0 For
example, one of the example files for Mac::Speech parsed the creator \s-1ID\s0
out of the binary data structure instead of calling the \s-1API,\s0 and got the
string reversed.
.SH "PACKAGES AND EXPORT TAGS"
.IX Header "PACKAGES AND EXPORT TAGS"
See each individual module for more information on use.  See \fI\s-1README\s0\fR
for more information about modules not included here.
.PP
.Vb 10
\&        Mac::AppleEvents        appleevents
\&        Mac::Components         components
\&        Mac::Files              files
\&        Mac::Gestalt            gestalt
\&        Mac::InternetConfig     internetconfig
\&        Mac::Memory             memory
\&        Mac::MoreFiles          morefiles
\&        Mac::Notification       notification
\&        Mac::OSA                osa     
\&        Mac::Processes          processes
\&        Mac::Resources          resources
\&        Mac::Sound              sound
\&        Mac::Speech             speech
\&        Mac::Types              types
\&        MacPerl                 macperl
.Ve
.SH "UNSUPPORTED FUNCTIONS"
.IX Header "UNSUPPORTED FUNCTIONS"
.SS "Functions supported only in Mac \s-1OS\s0"
.IX Subsection "Functions supported only in Mac OS"
The functions below are supported only in Mac \s-1OS,\s0 and not in Mac \s-1OS X,\s0
either because they are not supported by Carbon, or make no sense
on Mac \s-1OS X.\s0
.IP "Mac::AppleEvents" 4
.IX Item "Mac::AppleEvents"
.RS 4
.PD 0
.IP "AECountSubDescItems" 4
.IX Item "AECountSubDescItems"
.IP "AEDescToSubDesc" 4
.IX Item "AEDescToSubDesc"
.IP "AEGetKeySubDesc" 4
.IX Item "AEGetKeySubDesc"
.IP "AEGetNthSubDesc" 4
.IX Item "AEGetNthSubDesc"
.IP "AEGetSubDescBasicType" 4
.IX Item "AEGetSubDescBasicType"
.IP "AEGetSubDescData" 4
.IX Item "AEGetSubDescData"
.IP "AEGetSubDescType" 4
.IX Item "AEGetSubDescType"
.IP "AESubDescIsListOrRecord" 4
.IX Item "AESubDescIsListOrRecord"
.IP "AESubDescToDesc" 4
.IX Item "AESubDescToDesc"
.RE
.RS 4
.RE
.IP "Mac::Files" 4
.IX Item "Mac::Files"
.RS 4
.IP "Eject" 4
.IX Item "Eject"
.RE
.RS 4
.RE
.IP "Mac::InternetConfig" 4
.IX Item "Mac::InternetConfig"
.RS 4
.IP "ICChooseConfig" 4
.IX Item "ICChooseConfig"
.IP "ICChooseNewConfig" 4
.IX Item "ICChooseNewConfig"
.IP "ICGeneralFindConfigFile" 4
.IX Item "ICGeneralFindConfigFile"
.IP "ICGetConfigReference" 4
.IX Item "ICGetConfigReference"
.IP "ICGetComponentInstance" 4
.IX Item "ICGetComponentInstance"
.IP "ICSetConfigReference" 4
.IX Item "ICSetConfigReference"
.RE
.RS 4
.RE
.IP "Mac::Memory" 4
.IX Item "Mac::Memory"
.RS 4
.IP "CompactMemSys" 4
.IX Item "CompactMemSys"
.IP "FreeMemSys" 4
.IX Item "FreeMemSys"
.IP "GetApplLimit" 4
.IX Item "GetApplLimit"
.IP "MaxBlockSys" 4
.IX Item "MaxBlockSys"
.IP "MaxBlockSysClear" 4
.IX Item "MaxBlockSysClear"
.IP "MaxMemSys" 4
.IX Item "MaxMemSys"
.IP "NewEmptyHandleSys" 4
.IX Item "NewEmptyHandleSys"
.IP "NewHandleSys" 4
.IX Item "NewHandleSys"
.IP "NewHandleSysClear" 4
.IX Item "NewHandleSysClear"
.IP "NewPtrSys" 4
.IX Item "NewPtrSys"
.IP "NewPtrSysClear" 4
.IX Item "NewPtrSysClear"
.IP "PurgeMemSys" 4
.IX Item "PurgeMemSys"
.IP "ReserveMemSys" 4
.IX Item "ReserveMemSys"
.RE
.RS 4
.RE
.IP "Mac::Processes" 4
.IX Item "Mac::Processes"
.RS 4
.IP "LaunchDeskAccessory" 4
.IX Item "LaunchDeskAccessory"
.RE
.RS 4
.RE
.IP "Mac::Resources" 4
.IX Item "Mac::Resources"
.RS 4
.IP "CreateResFile" 4
.IX Item "CreateResFile"
.IP "OpenResFile" 4
.IX Item "OpenResFile"
.IP "RGetResource" 4
.IX Item "RGetResource"
.RE
.RS 4
.RE
.IP "Mac::Sound" 4
.IX Item "Mac::Sound"
.RS 4
.IP "Comp3to1" 4
.IX Item "Comp3to1"
.IP "Comp6to1" 4
.IX Item "Comp6to1"
.IP "Exp1to3" 4
.IX Item "Exp1to3"
.IP "Exp1to6" 4
.IX Item "Exp1to6"
.IP "MACEVersion" 4
.IX Item "MACEVersion"
.IP "SndControl" 4
.IX Item "SndControl"
.IP "SndPauseFilePlay" 4
.IX Item "SndPauseFilePlay"
.IP "SndRecordToFile" 4
.IX Item "SndRecordToFile"
.IP "SndStartFilePlay" 4
.IX Item "SndStartFilePlay"
.IP "SndStopFilePlay" 4
.IX Item "SndStopFilePlay"
.IP "SPBRecordToFile" 4
.IX Item "SPBRecordToFile"
.RE
.RS 4
.RE
.IP "MacPerl" 4
.IX Item "MacPerl"
.RS 4
.IP "Choose" 4
.IX Item "Choose"
.IP "ErrorFormat" 4
.IX Item "ErrorFormat"
.IP "FAccess" 4
.IX Item "FAccess"
.IP "LoadExternals" 4
.IX Item "LoadExternals"
.IP "Quit" 4
.IX Item "Quit"
.IP "Reply" 4
.IX Item "Reply"
.RE
.RS 4
.RE
.PD
.SS "Functions supported only in Mac \s-1OS X\s0"
.IX Subsection "Functions supported only in Mac OS X"
The functions below are supported only in Mac \s-1OS X,\s0 and not in Mac \s-1OS,\s0
either because they are newer APIs, or make no sense on Mac \s-1OS.\s0
.IP "Mac::Processes" 4
.IX Item "Mac::Processes"
.RS 4
.PD 0
.IP "GetProcessForPID" 4
.IX Item "GetProcessForPID"
.IP "GetProcessPID" 4
.IX Item "GetProcessPID"
.IP "LSFindApplicationForInfo" 4
.IX Item "LSFindApplicationForInfo"
.RE
.RS 4
.RE
.IP "Mac::Resources" 4
.IX Item "Mac::Resources"
.RS 4
.IP "FSCreateResourceFile" 4
.IX Item "FSCreateResourceFile"
.IP "FSOpenResourceFile" 4
.IX Item "FSOpenResourceFile"
.RE
.RS 4
.RE
.PD
.SH "KNOWN BUGS"
.IX Header "KNOWN BUGS"
See <http://rt.cpan.org/NoAuth/Bugs.html?Dist=Mac\-Carbon> for more information.
.IP "\(bu" 4
Need more tests for:
.RS 4
.IP "Mac::Memory" 4
.IX Item "Mac::Memory"
Should be more comprehensive for very little-used functions; main functionality is tested \s-1OK.\s0
.IP "Mac::Sound" 4
.IX Item "Mac::Sound"
Same.
.IP "Mac::Resources" 4
.IX Item "Mac::Resources"
Tested really only in other test suites, like Mac::Sound.  Should be more comprehensive.
.IP "Mac::Components" 4
.IX Item "Mac::Components"
Same.
.IP "Mac::Files" 4
.IX Item "Mac::Files"
Very good, but could do more exhausative \fIFindFolder()\fR tests.
.IP "Mac::Processes" 4
.IX Item "Mac::Processes"
Tests not very good, but tested pretty extensively by Mac::Glue and friends.
.IP "Mac::MoreFiles" 4
.IX Item "Mac::MoreFiles"
Same.
.IP "Mac::OSA" 4
.IX Item "Mac::OSA"
Same.
.IP "Mac::InternetConfig" 4
.IX Item "Mac::InternetConfig"
No real testing done.
.RE
.RS 4
.RE
.IP "\(bu" 4
In a few places, we need to know a text encoding, and assume it
(such as in \fILSFindApplicationForInfo()\fR, where Latin\-1 is assumed).
This is likely incorrect.
.IP "\(bu" 4
FSSpecs are limited to 31 characters.  Ugh.  Provide access to newer
FSRef-based APIs.
.IP "\(bu" 4
Not specific to the Carbon versions: the Mac:: modules define classes
such as \f(CW\*(C`Handle\*(C'\fR which probably should be something else, like
\&\f(CW\*(C`Mac::Handle\*(C'\fR or \f(CW\*(C`Mac::Carbon::Handle\*(C'\fR or \f(CW\*(C`Mac::Memory::Handle\*(C'\fR
(other examples include \f(CW\*(C`AEDesc\*(C'\fR, \f(CW\*(C`Point\*(C'\fR, \f(CW\*(C`Rect\*(C'\fR).  No one has really
complained before except on principle, but still ...
.IP "\(bu" 4
Can we support XCMDs etc. via \s-1XL\s0?  Do we want to?
.SH "AUTHOR"
.IX Header "AUTHOR"
The Mac Toolbox modules were written by Matthias Neeracher
<neeracher@mac.com>.  They were ported to Mac \s-1OS X\s0 and
are currently maintained by Chris Nandor <pudge@pobox.com>.
.SH "THANKS"
.IX Header "THANKS"
Michael Blakeley,
Emmanuel. M. Decarie,
Matthew Drayton,
brian d foy,
David Hand,
Gero Herrmann,
Peter N Lewis,
Paul McCann,
Sherm Pendley,
Randal Schwartz,
Michael Schwern,
John Siracusa,
Dan Sugalksi,
Ken Williams,
Steve Zellers.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
\&\fIperl\fR\|(1).
