.\" Automatically generated by Pod::Man 2.27 (Pod::Simple 3.28)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "OSA 3"
.TH OSA 3 "2017-07-07" "perl v5.18.2" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Mac::OSA \- Provide interface to Open Scripting Architecture
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&    use Mac::OSA;
\&
\&    use Mac::OSA qw(OSALoad OSAStore OSAExecute);
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
Access to Inside Macintosh is essential for proper use of these functions.
Explanations of terms, processes and procedures are provided there.
Any attempt to use these functions without guidance can cause severe errors in 
your machine, including corruption of data. \fBYou have been warned.\fR
.SS "Constants"
.IX Subsection "Constants"
.IP "kOSAComponentType" 4
.IX Item "kOSAComponentType"
.PD 0
.IP "kOSAGenericScriptingComponentSubtype" 4
.IX Item "kOSAGenericScriptingComponentSubtype"
.IP "kOSAFileType" 4
.IX Item "kOSAFileType"
.IP "kOSASuite" 4
.IX Item "kOSASuite"
.IP "kOSARecordedText" 4
.IX Item "kOSARecordedText"
.IP "kOSAScriptIsModified" 4
.IX Item "kOSAScriptIsModified"
.IP "kOSAScriptIsTypeCompiledScript" 4
.IX Item "kOSAScriptIsTypeCompiledScript"
.IP "kOSAScriptIsTypeScriptValue" 4
.IX Item "kOSAScriptIsTypeScriptValue"
.IP "kOSAScriptIsTypeScriptContext" 4
.IX Item "kOSAScriptIsTypeScriptContext"
.IP "kOSAScriptBestType" 4
.IX Item "kOSAScriptBestType"
.IP "kOSACanGetSource" 4
.IX Item "kOSACanGetSource"
.IP "typeOSADialectInfo" 4
.IX Item "typeOSADialectInfo"
.IP "keyOSADialectName" 4
.IX Item "keyOSADialectName"
.IP "keyOSADialectCode" 4
.IX Item "keyOSADialectCode"
.IP "keyOSADialectLangCode" 4
.IX Item "keyOSADialectLangCode"
.IP "keyOSADialectScriptCode" 4
.IX Item "keyOSADialectScriptCode"
.IP "kOSAScriptResourceType" 4
.IX Item "kOSAScriptResourceType"
.IP "typeOSAGenericStorage" 4
.IX Item "typeOSAGenericStorage"
.PD
Types and keywords.
.IP "kOSANullScript" 4
.IX Item "kOSANullScript"
.PD 0
.IP "kOSANullMode" 4
.IX Item "kOSANullMode"
.IP "kOSAModeNull" 4
.IX Item "kOSAModeNull"
.PD
Default values.
.IP "kOSASupportsCompiling" 4
.IX Item "kOSASupportsCompiling"
.PD 0
.IP "kOSASupportsGetSource" 4
.IX Item "kOSASupportsGetSource"
.IP "kOSASupportsAECoercion" 4
.IX Item "kOSASupportsAECoercion"
.IP "kOSASupportsAESending" 4
.IX Item "kOSASupportsAESending"
.IP "kOSASupportsRecording" 4
.IX Item "kOSASupportsRecording"
.IP "kOSASupportsConvenience" 4
.IX Item "kOSASupportsConvenience"
.IP "kOSASupportsDialects" 4
.IX Item "kOSASupportsDialects"
.IP "kOSASupportsEventHandling" 4
.IX Item "kOSASupportsEventHandling"
.PD
Feature flags.
.IP "kOSAModePreventGetSource" 4
.IX Item "kOSAModePreventGetSource"
.PD 0
.IP "kOSAModeNeverInteract" 4
.IX Item "kOSAModeNeverInteract"
.IP "kOSAModeCanInteract" 4
.IX Item "kOSAModeCanInteract"
.IP "kOSAModeAlwaysInteract" 4
.IX Item "kOSAModeAlwaysInteract"
.IP "kOSAModeDontReconnect" 4
.IX Item "kOSAModeDontReconnect"
.IP "kOSAModeCantSwitchLayer" 4
.IX Item "kOSAModeCantSwitchLayer"
.IP "kOSAModeDoRecord" 4
.IX Item "kOSAModeDoRecord"
.IP "kOSAModeCompileIntoContext" 4
.IX Item "kOSAModeCompileIntoContext"
.IP "kOSAModeAugmentContext" 4
.IX Item "kOSAModeAugmentContext"
.IP "kOSAModeDisplayForHumans" 4
.IX Item "kOSAModeDisplayForHumans"
.IP "kOSAModeDontStoreParent" 4
.IX Item "kOSAModeDontStoreParent"
.IP "kOSAModeDispatchToDirectObject" 4
.IX Item "kOSAModeDispatchToDirectObject"
.IP "kOSAModeDontGetDataForArguments" 4
.IX Item "kOSAModeDontGetDataForArguments"
.IP "kOSAModeDontDefine" 4
.IX Item "kOSAModeDontDefine"
.PD
Mode flags.
.IP "kOSAErrorNumber" 4
.IX Item "kOSAErrorNumber"
.PD 0
.IP "kOSAErrorMessage" 4
.IX Item "kOSAErrorMessage"
.IP "kOSAErrorBriefMessage" 4
.IX Item "kOSAErrorBriefMessage"
.IP "kOSAErrorApp" 4
.IX Item "kOSAErrorApp"
.IP "kOSAErrorPartialResult" 4
.IX Item "kOSAErrorPartialResult"
.IP "kOSAErrorOffendingObject" 4
.IX Item "kOSAErrorOffendingObject"
.IP "kOSAErrorExpectedType" 4
.IX Item "kOSAErrorExpectedType"
.IP "kOSAErrorRange" 4
.IX Item "kOSAErrorRange"
.IP "typeOSAErrorRange" 4
.IX Item "typeOSAErrorRange"
.IP "keyOSASourceStart" 4
.IX Item "keyOSASourceStart"
.IP "keyOSASourceEnd" 4
.IX Item "keyOSASourceEnd"
.PD
Error handling.
.IP "kOSAUseStandardDispatch" 4
.IX Item "kOSAUseStandardDispatch"
.PD 0
.IP "kOSANoDispatch" 4
.IX Item "kOSANoDispatch"
.IP "kOSADontUsePhac" 4
.IX Item "kOSADontUsePhac"
.IP "kGenericComponentVersion" 4
.IX Item "kGenericComponentVersion"
.PD
Dispatching flags
.SS "Functions"
.IX Subsection "Functions"
.IP "OSALoad \s-1SCRIPTINGCOMPONENT, SCRIPTDATA, MODEFLAGS\s0" 4
.IX Item "OSALoad SCRIPTINGCOMPONENT, SCRIPTDATA, MODEFLAGS"
The OSALoad function loads script data and returns a script \s-1ID.\s0 The generic
scripting component uses the descriptor record in the \s-1SCRIPTDATA\s0 parameter to
determine which scripting component should load the script. If the descriptor
record is of type typeOSAGenericStorage, the generic scripting component uses the
trailer at the end of the \s-1SCRIPTDATA\s0 to identify the scripting component. If the
descriptor record's type is the subtype value for another scripting component,
the generic scripting component uses the descriptor type to identify the
scripting component.
Return \f(CW\*(C`undef\*(C'\fR if an error was detected.
.IP "OSAStore \s-1SCRIPTINGCOMPONENT, SCRIPTID, DESIREDTYPE, MODEFLAGS\s0" 4
.IX Item "OSAStore SCRIPTINGCOMPONENT, SCRIPTID, DESIREDTYPE, MODEFLAGS"
The OSAStore function returns script data in a descriptor record so that the data
can later be saved in a resource or written to the data fork of a document. You
can then reload the data for the descriptor record as a compiled script (although
possibly with a different script \s-1ID\s0) by passing the descriptor record to \fIOSALoad()\fR.
Return \f(CW\*(C`undef\*(C'\fR if an error was detected.
.IP "OSAExecute \s-1SCRIPTINGCOMPONENT, COMPILEDSCRIPTID, CONTEXTID, MODEFLAGS\s0" 4
.IX Item "OSAExecute SCRIPTINGCOMPONENT, COMPILEDSCRIPTID, CONTEXTID, MODEFLAGS"
The OSAExecute function executes the compiled script identified by the
\&\s-1COMPILEDSCRIPTID\s0 parameter, using the script context identified by the \s-1CONTEXTID\s0
parameter to maintain state information, such as the binding of variables, for
the compiled script. After successfully executing a script, OSAExecute returns
the script \s-1ID\s0 for a resulting script value, or, if execution does not result in a
value, \f(CW\*(C`undef\*(C'\fR.
.IP "OSADisplay \s-1SCRIPTINGCOMPONENT, SCRIPTVALUEID, DESIREDTYPE, MODEFLAGS\s0" 4
.IX Item "OSADisplay SCRIPTINGCOMPONENT, SCRIPTVALUEID, DESIREDTYPE, MODEFLAGS"
The OSADisplay function coerces the script value identified by \s-1SCRIPTVALUEID\s0 to a
descriptor record of the text type specified by the \s-1DESIREDTYPE\s0 parameter, if
possible. Valid types include all the standard text descriptor types defined in
the Apple Event Registry: Standard Suites, plus any special types supported by
the scripting component.
Return \f(CW\*(C`undef\*(C'\fR if an error was detected.
.IP "OSAScriptError \s-1SCRIPTINGCOMPONENT, SELECTOR, DESIREDTYPE\s0" 4
.IX Item "OSAScriptError SCRIPTINGCOMPONENT, SELECTOR, DESIREDTYPE"
Whenever the \fIOSAExecute()\fR function returns the error errOSAScriptError, you can use
the OSAScriptError function to get more specific information about the error from
the scripting component that encountered it. (This information remains available
only until the next call to the same scripting component.) The information
returned by OSAScriptError depends on the value passed in the \s-1SELECTOR\s0 parameter,
which also determines the descriptor type you should specify in the \s-1DESIREDTYPE\s0
parameter.
.Sp
Return \f(CW\*(C`undef\*(C'\fR if an error was detected.
.IP "OSADispose \s-1SCRIPTINGCOMPONENT, SCRIPTID\s0" 4
.IX Item "OSADispose SCRIPTINGCOMPONENT, SCRIPTID"
The OSADispose function releases the memory assigned to the script data identified
by the \s-1SCRIPTID\s0 parameter. The \s-1SCRIPTID\s0 passed to the OSADispose function is no
longer valid if the function returns successfully. A scripting component can then
reuse that \s-1SCRIPTID\s0 for other script data. 
Return zero if no error was detected.
.IP "OSASetScriptInfo \s-1SCRIPTINGCOMPONENT, SCRIPTID, SELECTOR, VALUE\s0" 4
.IX Item "OSASetScriptInfo SCRIPTINGCOMPONENT, SCRIPTID, SELECTOR, VALUE"
The OSASetScriptInfo function sets script information according to the value you
pass in the selector parameter. If you use the kOSAScriptIsModified constant,
OSASetScriptInfo sets a value that indicates how many times the script data has
been modified since it was created or passed to OSALoad. Some scripting
components may provide additional constants.
Return zero if no error was detected.
.IP "OSAGetScriptInfo \s-1SCRIPTINGCOMPONENT, SCRIPTID, SELECTOR\s0" 4
.IX Item "OSAGetScriptInfo SCRIPTINGCOMPONENT, SCRIPTID, SELECTOR"
The OSAGetScriptInfo function returns various results according to the value you
pass in the \s-1SELECTOR\s0 parameter.
Returns an integer value which may need to be recast as the desired type.
.IP "OSASetProperty \s-1SCRIPTINGCOMPONENT, MODEFLAGS, SCRIPTID, VARIABLENAME, SCRIPTVALUEID\s0" 4
.IX Item "OSASetProperty SCRIPTINGCOMPONENT, MODEFLAGS, SCRIPTID, VARIABLENAME, SCRIPTVALUEID"
The OSASetProperty function sets the value of a script property in a specified script.
\&\s-1VARIABLENAME\s0 is an AEDesc.
.IP "OSAGetProperty \s-1SCRIPTINGCOMPONENT, MODEFLAGS, SCRIPTID, VARIABLENAME\s0" 4
.IX Item "OSAGetProperty SCRIPTINGCOMPONENT, MODEFLAGS, SCRIPTID, VARIABLENAME"
The OSAGetProperty function gets the value of a script property in a specified script.
\&\s-1VARIABLENAME\s0 is an AEDesc.  Returns an AEDesc.
.IP "OSAGetAppTerminology \s-1SCRIPTINGCOMPONENT, MODEFLAGS, FILE, TERMINOLOGYID\s0" 4
.IX Item "OSAGetAppTerminology SCRIPTINGCOMPONENT, MODEFLAGS, FILE, TERMINOLOGYID"
OSAGetAppTerminology gets one or more scripting terminology resources from
the specified file.  Returns an AEDesc.
.IP "OSAScriptingComponentName \s-1SCRIPTINGCOMPONENT\s0" 4
.IX Item "OSAScriptingComponentName SCRIPTINGCOMPONENT"
The OSAScriptingComponentName function returns a descriptor record that you can
coerce to a text descriptor type such as typeChar. This can be useful if you want
to display the name of the scripting language in which the user should write a
new script.
Return \f(CW\*(C`undef\*(C'\fR if an error was detected.
.IP "OSACompile \s-1SCRIPTINGCOMPONENT, SOURCEDATA, MODEFLAGS,\s0 [\s-1PREVIOUSSCRIPTID\s0]" 4
.IX Item "OSACompile SCRIPTINGCOMPONENT, SOURCEDATA, MODEFLAGS, [PREVIOUSSCRIPTID]"
You can pass a descriptor record containing source data suitable for a specific
scripting component (usually text) to the OSACompile function to obtain a script
\&\s-1ID\s0 for the equivalent compiled script or script context. To compile the source
data as a script context for use with \fIOSAExecuteEvent()\fR or \fIOSADoEvent()\fR, you must set
the kOSAModeCompileIntoContext flag, and the source data should include appropriate
handlers.
Return zero if no error was detected.
.IP "OSACopyID \s-1SCRIPTINGCOMPONENT, FROMID,\s0 [\s-1TOID\s0]" 4
.IX Item "OSACopyID SCRIPTINGCOMPONENT, FROMID, [TOID]"
The OSACopyID function replaces the script data identified by the script \s-1ID\s0 in
the \s-1TOID\s0 parameter with the script data identified by the script \s-1ID\s0 in the \s-1FROMID\s0
parameter.
Return \f(CW\*(C`undef\*(C'\fR if an error was detected.
.IP "OSAGetSource \s-1SCRIPTINGCOMPONENT, SCRIPTID,\s0 [\s-1DESIREDTYPE\s0]" 4
.IX Item "OSAGetSource SCRIPTINGCOMPONENT, SCRIPTID, [DESIREDTYPE]"
The OSAGetSource function decompiles the script data identified by the specified
script \s-1ID\s0 and returns a descriptor record containing the equivalent source data.
Return \f(CW\*(C`undef\*(C'\fR if an error was detected.
.IP "OSACoerceFromDesc \s-1SCRIPTINGCOMPONENT, SCRIPTDATA, MODEFLAGS\s0" 4
.IX Item "OSACoerceFromDesc SCRIPTINGCOMPONENT, SCRIPTDATA, MODEFLAGS"
The OSACoerceFromDesc function coerces the descriptor record in the \s-1SCRIPTDATA\s0
parameter to the equivalent script value and returns a script \s-1ID\s0 for that value. 
Return \f(CW\*(C`undef\*(C'\fR if an error was detected.
.IP "OSACoerceToDesc \s-1SCRIPTINGCOMPONENT, SCRIPTID, DESIREDTYPE, MODEFLAGS\s0" 4
.IX Item "OSACoerceToDesc SCRIPTINGCOMPONENT, SCRIPTID, DESIREDTYPE, MODEFLAGS"
The OSACoerceToDesc function coerces the script value identified by \s-1SCRIPTID\s0
to a descriptor record of the type specified by the \s-1DESIREDTYPE\s0 parameter, if
possible.
Return \f(CW\*(C`undef\*(C'\fR if an error was detected.
.IP "OSASetDefaultTarget \s-1SCRIPTINGCOMPONENT, TARGET\s0" 4
.IX Item "OSASetDefaultTarget SCRIPTINGCOMPONENT, TARGET"
The OSASetDefaultTarget function establishes the default target application for
Apple event sending and the default application from which the scripting
component should obtain terminology information. For example, AppleScript
statements that refer to the default application do not need to be enclosed in
\&\f(CW\*(C`tell/end tell\*(C'\fR statements. 
Return zero if no error was detected.
.IP "OSAStartRecording \s-1SCRIPTINGCOMPONENT,\s0 [\s-1COMPILEDSCRIPTTOMODIFYID\s0]" 4
.IX Item "OSAStartRecording SCRIPTINGCOMPONENT, [COMPILEDSCRIPTTOMODIFYID]"
The OSAStartRecording routine turns on Apple event recording. Subsequent Apple
events are recorded (that is, appended to any existing statements) in the
compiled script specified by the \s-1COMPILEDSCRIPTTOMODIFYID\s0 parameter.
Return \f(CW\*(C`undef\*(C'\fR if an error was detected.
.IP "OSAStopRecording \s-1SCRIPTINGCOMPONENT, COMPILEDSCRIPTID\s0" 4
.IX Item "OSAStopRecording SCRIPTINGCOMPONENT, COMPILEDSCRIPTID"
The OSAStopRecording function turns off recording. If the script is not currently
open in a script editor window, the \s-1COMPILEDSCRIPTTOMODIFYID\s0 parameter supplied
to \fIOSAStartRecording()\fR is then augmented to contain the newly recorded statements.
If the script is currently open in a script editor window, the script data that
corresponds to the compiledScriptToModifyID parameter supplied to
\&\fIOSAStartRecording()\fR is updated continuously until the client application calls
OSAStopRecording. 
Return zero if no error was detected.
.IP "OSALoadExecute \s-1SCRIPTINGCOMPONENT, SCRIPTDATA, CONTEXTID, MODEFLAGS\s0" 4
.IX Item "OSALoadExecute SCRIPTINGCOMPONENT, SCRIPTDATA, CONTEXTID, MODEFLAGS"
The OSALoadExecute function loads script data and executes the resulting compiled
script, using the script context identified by the \s-1CONTEXTID\s0 parameter to
maintain state information such as the binding of variables. After successfully
executing the script, OSALoadExecute disposes of the compiled script and returns
either the script \s-1ID\s0 for the resulting script value or, if execution does not
result in a value, the constant kOSANullScript. 
Return \f(CW\*(C`undef\*(C'\fR if an error was detected.
.IP "OSACompileExecute \s-1SCRIPTINGCOMPONENT, SOURCEDATA, CONTEXTID, MODEFLAGS\s0" 4
.IX Item "OSACompileExecute SCRIPTINGCOMPONENT, SOURCEDATA, CONTEXTID, MODEFLAGS"
The OSACompileExecute function compiles source data and executes the resulting
compiled script, using the script context identified by the \s-1CONTEXTID\s0 parameter
to maintain state information such as the binding of variables. After
successfully executing the script, OSACompileExecute disposes of the compiled
script and returns either the script \s-1ID\s0 for the resulting script value or, if
execution does not result in a value, the constant kOSANullScript.
Return \f(CW\*(C`undef\*(C'\fR if an error was detected.
.IP "OSADoScript \s-1SCRIPTINGCOMPONENT, SOURCEDATA, CONTEXTID, DESIREDTYPE, MODEFLAGS\s0" 4
.IX Item "OSADoScript SCRIPTINGCOMPONENT, SOURCEDATA, CONTEXTID, DESIREDTYPE, MODEFLAGS"
Calling the OSADoScript function is equivalent to calling \fIOSACompile()\fR followed by
\&\fIOSAExecute()\fR and \fIOSADisplay()\fR. After compiling the source data, executing the
compiled script using the script context identified by the \s-1CONTEXTID\s0 parameter,
and returning the text equivalent of the resulting script value, OSADoScript
disposes of both the compiled script and the resulting script value.
Return \f(CW\*(C`undef\*(C'\fR if an error was detected.
.IP "OSASetCurrentDialect \s-1SCRIPTINGCOMPONENT, DIALECTCODE\s0" 4
.IX Item "OSASetCurrentDialect SCRIPTINGCOMPONENT, DIALECTCODE"
Set the current dialect for a scripting component.
Return zero if no error was detected.
.IP "OSAGetCurrentDialect \s-1SCRIPTINGCOMPONENT\s0" 4
.IX Item "OSAGetCurrentDialect SCRIPTINGCOMPONENT"
Get the dialect code for the dialect currently being used by a scripting
component.
Returns the code for the current dialect of the specified scripting component.
.IP "OSAAvailableDialects \s-1SCRIPTINGCOMPONENT\s0" 4
.IX Item "OSAAvailableDialects SCRIPTINGCOMPONENT"
Obtain a descriptor list containing information about each of the currently
available dialects for a scripting component. 
Return \f(CW\*(C`undef\*(C'\fR if an error was detected.
.IP "OSAGetDialectInfo \s-1SCRIPTINGCOMPONENT, DIALECTCODE, SELECTOR\s0" 4
.IX Item "OSAGetDialectInfo SCRIPTINGCOMPONENT, DIALECTCODE, SELECTOR"
After you obtain a list of dialect codes by calling \fIOSAAvailableDialectCodeList()\fR,
you can pass any of those codes to OSAGetDialectInfo to get information about the
corresponding dialect. The descriptor type of the descriptor record returned by
OSAGetDialectInfo depends on the constant specified in the \s-1SELECTOR\s0 parameter.
Return \f(CW\*(C`undef\*(C'\fR if an error was detected.
.IP "OSAAvailableDialectCodeList \s-1SCRIPTINGCOMPONENT\s0" 4
.IX Item "OSAAvailableDialectCodeList SCRIPTINGCOMPONENT"
Obtain a descriptor list containing dialect codes for each of a scripting
component's currently available dialects. 
Return \f(CW\*(C`undef\*(C'\fR if an error was detected.
.IP "OSAExecuteEvent \s-1SCRIPTINGCOMPONENT, THEAPPLEEVENT, CONTEXTID, MODEFLAGS\s0" 4
.IX Item "OSAExecuteEvent SCRIPTINGCOMPONENT, THEAPPLEEVENT, CONTEXTID, MODEFLAGS"
The OSAExecuteEvent function attempts to use the script context specified by the
contextID parameter to handle the Apple event specified by the \s-1THEAPPLEEVENT\s0
parameter.
Return \f(CW\*(C`undef\*(C'\fR if an error was detected.
.IP "OSADoEvent \s-1SCRIPTINGCOMPONENT, THEAPPLEEVENT, CONTEXTID, MODEFLAGS\s0" 4
.IX Item "OSADoEvent SCRIPTINGCOMPONENT, THEAPPLEEVENT, CONTEXTID, MODEFLAGS"
The OSADoEvent function resembles both \fIOSADoScript()\fR and \fIOSAExecuteEvent()\fR.
However,
unlike \fIOSADoScript()\fR, the script OSADoEvent executes must be in the form of a
script context, and execution is initiated by an Apple event. Unlike
\&\fIOSAExecuteEvent()\fR, OSADoEvent returns a reply Apple event rather than the script \s-1ID\s0
of the resulting script value.
Return \f(CW\*(C`undef\*(C'\fR if an error was detected.
.IP "OSAMakeContext \s-1SCRIPTINGCOMPONENT, CONTEXTNAME,\s0 [\s-1PARENTCONTEXT\s0]" 4
.IX Item "OSAMakeContext SCRIPTINGCOMPONENT, CONTEXTNAME, [PARENTCONTEXT]"
The OSAMakeContext function creates a new script context that you may pass to
\&\fIOSAExecute()\fR or \fIOSAExecuteEvent()\fR. The new script context inherits the bindings of
the script context specified in the \s-1PARENTCONTEXT\s0 parameter.
Return \f(CW\*(C`undef\*(C'\fR if an error was detected.
.IP "OSAGetDefaultScriptingComponent \s-1GENERICSCRIPTINGCOMPONENT\s0" 4
.IX Item "OSAGetDefaultScriptingComponent GENERICSCRIPTINGCOMPONENT"
The OSAGetDefaultScriptingComponent function returns the subtype code for the
default scripting component. This is the scripting component that will be used by
\&\fIOSAStartRecording()\fR, \fIOSACompile()\fR, or \fIOSACompileExecute()\fR if no existing script \s-1ID\s0 is
specified. From the user's point of view, the default scripting component
corresponds to the scripting language selected in the Script Editor application
when the user first creates a new script.
Return \f(CW\*(C`undef\*(C'\fR if an error was detected.
.IP "OSASetDefaultScriptingComponent \s-1GENERICSCRIPTINGCOMPONENT, SCRIPTINGSUBTYPE\s0" 4
.IX Item "OSASetDefaultScriptingComponent GENERICSCRIPTINGCOMPONENT, SCRIPTINGSUBTYPE"
The OSASetDefaultScriptingComponent function sets the default scripting component
for the specified instance of the generic scripting component to the scripting
component identified by the \s-1SCRIPTINGSUBTYPE\s0 parameter.
Return zero if no error was detected.
.IP "OSAGetScriptingComponent \s-1GENERICSCRIPTINGCOMPONENT, SCRIPTINGSUBTYPE\s0" 4
.IX Item "OSAGetScriptingComponent GENERICSCRIPTINGCOMPONENT, SCRIPTINGSUBTYPE"
The OSAGetScriptingComponent function returns an instance of the scripting
component identified by the
\&\s-1SCRIPTINGSUBTYPE\s0 parameter. Each instance of the generic scripting component
keeps track of a single instance of each component subtype, so
OSAGetScriptingComponent always returns the same instance of a specified
scripting component that the generic scripting component uses for standard
scripting component routines.
Return \f(CW\*(C`undef\*(C'\fR if an error was detected.
.IP "OSAGetScriptingComponentFromStored \s-1GENERICSCRIPTINGCOMPONENT, SCRIPTDATA\s0" 4
.IX Item "OSAGetScriptingComponentFromStored GENERICSCRIPTINGCOMPONENT, SCRIPTDATA"
The OSAGetScriptingComponentFromStored function returns the subtype code for the
scripting component that created the script
data specified by the \s-1SCRIPTDATA\s0 parameter. 
Return \f(CW\*(C`undef\*(C'\fR if an error was detected.
.IP "OSAGenericToRealID \s-1GENERICSCRIPTINGCOMPONENT, GENERICSCRIPTID\s0" 4
.IX Item "OSAGenericToRealID GENERICSCRIPTINGCOMPONENT, GENERICSCRIPTID"
Given a \s-1GENERICSCRIPTID \s0(that is, a script \s-1ID\s0 returned by a call to a standard
component routine via the generic scripting component), the OSAGenericToRealID
function returns the equivalent component-specific script \s-1ID\s0 and the component
instance that created that script \s-1ID\s0 as an array.
.IP "OSARealToGenericID \s-1GENERICSCRIPTINGCOMPONENT, THESCRIPTID, THEEXACTCOMPONENT\s0" 4
.IX Item "OSARealToGenericID GENERICSCRIPTINGCOMPONENT, THESCRIPTID, THEEXACTCOMPONENT"
The OSARealToGenericID function performs the reverse of the task performed by
\&\fIOSAGenericToRealID()\fR. Given a component-specific \s-1SCRIPTID\s0 and an exact scripting
component instance (that is, the component instance that created the
component-specific script \s-1ID\s0), the OSARealToGenericID function returns the
corresponding generic script \s-1ID.\s0
Return \f(CW\*(C`undef\*(C'\fR if an error was detected.
.SH "AUTHOR"
.IX Header "AUTHOR"
Written by Matthias Ulrich Neeracher <neeracher@mac.com>,
documentation by Bob Dalgleish <bob.dalgleish@sasknet.sk.ca>.
Currently maintained by Chris Nandor <pudge@pobox.com>.
