.\" Automatically generated by Pod::Man 2.27 (Pod::Simple 3.28)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Apache::TestTrace 3"
.TH Apache::TestTrace 3 "2015-06-18" "perl v5.18.2" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Apache::TestTrace \- Helper output generation functions
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&    use Apache::TestTrace;
\&
\&    debug "foo bar";
\&
\&    info_sub "missed it";
\&
\&    error_mark "something is wrong";
\&
\&    # test sub that exercises all the tracing functions
\&    sub test {
\&        print $Apache::TestTrace::LogFH
\&              "TraceLevel: $Apache::TestTrace::Level\en";
\&        $_\->($_,[1..3],$_) for qw(emerg alert crit error
\&                                  warning notice info debug todo);
\&        print $Apache::TestTrace::LogFH "\en\en"
\&    };
\&
\&    # demo the trace subs using default setting
\&    test();
\&
\&    {
\&        # override the default trace level with \*(Aqcrit\*(Aq
\&        local $Apache::TestTrace::Level = \*(Aqcrit\*(Aq;
\&        # now only \*(Aqcrit\*(Aq and higher levels will do tracing lower level
\&        test();
\&    }
\&
\&    {
\&        # set the trace level to \*(Aqdebug\*(Aq
\&        local $Apache::TestTrace::Level = \*(Aqdebug\*(Aq;
\&        # now only \*(Aqdebug\*(Aq and higher levels will do tracing lower level
\&        test();
\&    }
\&
\&    {
\&        open OUT, ">/tmp/foo" or die $!;
\&        # override the default Log filehandle
\&        local $Apache::TestTrace::LogFH = \e*OUT;
\&        # now the traces will go into a new filehandle
\&        test();
\&        close OUT;
\&    }
\&
\&    # override tracing level via \-trace opt
\&    % t/TEST \-trace=debug
\&
\&    # override tracing level via env var
\&    % env APACHE_TEST_TRACE_LEVEL=debug t/TEST
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This module exports a number of functions that make it easier
generating various diagnostics messages in your programs in a
consistent way and saves some keystrokes as it handles the new lines
and sends the messages to \s-1STDERR\s0 for you.
.PP
This module provides the same trace methods as \fIsyslog\fR\|(3)'s log
levels. Listed from low level to high level: \fIemerg()\fR, \fIalert()\fR, \fIcrit()\fR,
\&\fIerror()\fR, \fIwarning()\fR, \fInotice()\fR, \fIinfo()\fR, \fIdebug()\fR. The only different
function is \fIwarning()\fR, since warn is already taken by Perl.
.PP
The module provides another trace function called \fItodo()\fR which is
useful for todo items. It has the same level as \fIdebug\fR (the
highest).
.PP
There are two more variants of each of these functions. If the
\&\fI_mark\fR suffix is appended (e.g., \fIerror_mark\fR) the trace will start
with the filename and the line number the function was called from. If
the \fI_sub\fR suffix is appended (e.g., \fIerror_info\fR) the trace will
start with the name of the subroutine the function was called from.
.PP
If you have \f(CW\*(C`Term::ANSIColor\*(C'\fR installed the diagnostic messages will
be colorized, otherwise a special for each function prefix will be
used.
.PP
If \f(CW\*(C`Data::Dumper\*(C'\fR is installed and you pass a reference to a variable
to any of these functions, the variable will be dumped with
\&\f(CW\*(C`Data::Dumper::Dumper()\*(C'\fR.
.PP
Functions whose level is above the level set in
\&\f(CW$Apache::TestTrace::Level\fR become NOPs. For example if the level is
set to \fIalert\fR, only \fIalert()\fR and \fIemerg()\fR functions will generate the
output. The default setting of this variable is \fIwarning\fR. Other
valid values are: \fIemerg\fR, \fIalert\fR, \fIcrit\fR, \fIerror\fR, \fIwarning\fR,
\&\fInotice\fR, \fIinfo\fR, \fIdebug\fR.
.PP
Another way to affect the trace level is to set
\&\f(CW$ENV{APACHE_TEST_TRACE_LEVEL}\fR, which takes effect if
\&\f(CW$Apache::TestTrace::Level\fR is not set. So an explicit setting of
\&\f(CW$Apache::TestTrace::Level\fR always takes precedence.
.PP
By default all the output generated by these functions goes to
\&\s-1STDERR.\s0 You can override the default filehandler by overriding
\&\f(CW$Apache::TestTrace::LogFH\fR with a new filehandler.
.PP
When you override this package's global variables, think about
localizing your local settings, so it won't affect other modules using
this module in the same run.
.SH "TODO"
.IX Header "TODO"
.Vb 2
\& o provide an option to disable the coloring altogether via some flag
\&   or import()
.Ve
.SH "AUTHOR"
.IX Header "AUTHOR"
Stas Bekman with contributions from Doug MacEachern
