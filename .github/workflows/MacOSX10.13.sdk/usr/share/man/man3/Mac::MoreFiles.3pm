.\" Automatically generated by Pod::Man 2.27 (Pod::Simple 3.28)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "MoreFiles 3"
.TH MoreFiles 3 "2017-07-07" "perl v5.18.2" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Mac::MoreFiles \- Sophisticated file management routines
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&    use Mac::MoreFiles;
\&
\&    $application = $Application{"MrPL"};
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
.SS "Variables"
.IX Subsection "Variables"
.ie n .IP "%Application" 4
.el .IP "\f(CW%Application\fR" 4
.IX Item "%Application"
The \f(CW%Application\fR hash will return the path to the application for a given 
signature, searching on all mounted volumes.
.SS "Functions"
.IX Subsection "Functions"
.IP "FSpCreateMinimum \s-1SPEC\s0" 4
.IX Item "FSpCreateMinimum SPEC"
Create a new file with no creator or file type.
The FSpCreateMinimum function creates a new file without attempting to set 
the the creator and file type of the new file.  This function is needed to
create a file in an AppleShare \*(L"dropbox\*(R" where the user can make
changes, but cannot see folder or files. The FSSpec in \s-1SPEC\s0 is used to create
the file.
.IP "FSpShare \s-1SPEC\s0" 4
.IX Item "FSpShare SPEC"
Establish a local volume or directory as a share point.
The FSpShare function establishes a local volume or directory as a
share point. \s-1SPEC\s0 is an FSSpec record specifying the share point.
.IP "FSpUnshare \s-1SPEC\s0" 4
.IX Item "FSpUnshare SPEC"
The FSpUnshare function removes a share point in \s-1SPEC.\s0
.IP "FSpFileCopy \s-1SRCSPEC, DSTSPEC, COPYNAME, PREFLIGHT\s0" 4
.IX Item "FSpFileCopy SRCSPEC, DSTSPEC, COPYNAME, PREFLIGHT"
The FSpFileCopy function duplicates a file and optionally renames it.
Since the \fIPBHCopyFile()\fR routine is only available on some
\&\s-1AFP\s0 server volumes under specific conditions, this routine
either uses \fIPBHCopyFile()\fR, or does all of the work \fIPBHCopyFile()\fR
does.  The \s-1SRCSPEC\s0 is used to
determine the location of the file to copy.  The \s-1DSTSPEC\s0 is
used to determine the location of the
destination directory.  If \s-1COPYNAME\s0 <> \s-1NIL,\s0 then it points
to the name of the new file.
.IP "FSpDirectoryCopy \s-1SRCSPEC, DSTSPEC, PREFLIGHT,\s0 [\s-1COPYERRHANDLER\s0]" 4
.IX Item "FSpDirectoryCopy SRCSPEC, DSTSPEC, PREFLIGHT, [COPYERRHANDLER]"
Make a copy of a directory structure in a new location.
The FSpDirectoryCopy function makes a copy of a directory structure in a
new location. \s-1COPYERRHANDLER\s0 is the Perl routine name to handle an
error, should one arise. It will be called as:
.Sp
.Vb 1
\&    $bailout = &$COPYERRHANDLER(ERRORCODE,OPERATION,SRCSPEC,DSTSPEC);
.Ve
.IP "FSpIterateDirectory \s-1SPEC, MAXLEVELS, ITERATEFILTER, YOURDATAPTR\s0" 4
.IX Item "FSpIterateDirectory SPEC, MAXLEVELS, ITERATEFILTER, YOURDATAPTR"
Iterate (scan) through a directory's content.
The FSpIterateDirectory function performs a recursive iteration (scan)
of the specified directory and calls your \s-1ITERATEFILTER\s0 function once
for each file and directory found.
.Sp
The \s-1MAXLEVELS\s0 parameter lets you control how deep the recursion goes.
If \s-1MAXLEVELS\s0 is 1, FSpIterateDirectory only scans the specified directory;
if \s-1MAXLEVELS\s0 is 2, FSpIterateDirectory scans the specified directory and
one subdirectory below the specified directory; etc. Set \s-1MAXLEVELS\s0 to
zero to scan all levels.
.Sp
The \s-1YOURDATAPTR\s0 parameter can point to whatever data structure you might
want to access from within the \s-1ITERATEFILTER.\s0 Your filter function will be
called as:
.Sp
.Vb 1
\&    $quit = &$filterFunction(YOURDATAPTR, SPEC);
.Ve
.IP "FSpDTGetAPPL \s-1VOLUME, CREATOR\s0" 4
.IX Item "FSpDTGetAPPL VOLUME, CREATOR"
The FSpDTGetAPPL function finds an application (file type '\s-1APPL\s0') with
the specified \s-1CREATOR\s0 on the specified \s-1VOLUME.\s0 It first tries to get
the application mapping from the desktop database. If that fails, then
it tries to find an application with the specified creator using
the File Manager's \fICatSearch()\fR routine. If that fails, then it tries to
find an application in the Desktop file.
Returns FSSpec or \f(CW\*(C`undef\*(C'\fR on failure.
.IP "FSpDTSetComment \s-1SPEC, COMMENT\s0" 4
.IX Item "FSpDTSetComment SPEC, COMMENT"
The FSpDTSetComment function sets a file or directory's Finder comment
field. The volume must support the Desktop Manager because you only
have read access to the Desktop file.
.IP "FSpDTGetComment \s-1SPEC\s0" 4
.IX Item "FSpDTGetComment SPEC"
The FSpDTGetComment function gets a file or directory's Finder comment
field (if any) from the Desktop Manager or if the Desktop Manager is
not available, from the Finder's Desktop file.
Returns Str255, or \f(CW\*(C`undef\*(C'\fR on failure.
.IP "FSpDTCopyComment \s-1SRCSPEC, DSTSPEC\s0" 4
.IX Item "FSpDTCopyComment SRCSPEC, DSTSPEC"
The FSpDTCopyComment function copies the desktop database comment from
the source to the destination object.  Both the source and the
destination volumes must support the Desktop Manager.
.SH "AUTHOR"
.IX Header "AUTHOR"
Written by Matthias Ulrich Neeracher <neeracher@mac.com>,
documentation by Bob Dalgleish <bob.dalgleish@sasknet.sk.ca>.
Currently maintained by Chris Nandor <pudge@pobox.com>.
