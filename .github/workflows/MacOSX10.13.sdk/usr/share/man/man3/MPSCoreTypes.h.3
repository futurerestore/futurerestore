.TH "MPSCoreTypes.h" 3 "Sun Jul 2 2017" "Version MetalPerformanceShaders-84.1" "MetalPerformanceShaders.framework" \" -*- nroff -*-
.ad l
.nh
.SH NAME
MPSCoreTypes.h
.SH SYNOPSIS
.br
.PP
\fC#import <Foundation/NSObject\&.h>\fP
.br
\fC#import <Metal/Metal\&.h>\fP
.br

.SS "Classes"

.in +1c
.ti -1c
.RI "struct \fBMPSOffset\fP"
.br
.ti -1c
.RI "struct \fBMPSOrigin\fP"
.br
.ti -1c
.RI "struct \fBMPSSize\fP"
.br
.ti -1c
.RI "struct \fBMPSRegion\fP"
.br
.ti -1c
.RI "struct \fBMPSScaleTransform\fP"
.br
.ti -1c
.RI "protocol \fB<MPSDeviceProvider>\fP"
.br
.in -1c
.SS "Macros"

.in +1c
.ti -1c
.RI "#define \fB__has_attribute\fP(a)   0"
.br
.ti -1c
.RI "#define \fB__has_feature\fP(f)   0"
.br
.ti -1c
.RI "#define \fB__has_extension\fP(e)   0"
.br
.ti -1c
.RI "#define \fBMPS_HIDE_AVAILABILITY\fP   1"
.br
.ti -1c
.RI "#define \fBMPS_ENUM_AVAILABLE_STARTING\fP(\&.\&.\&.)"
.br
.ti -1c
.RI "#define \fBMPS_ENUM_AVAILABLE_STARTING_BUT_DEPRECATED\fP(\&.\&.\&.)"
.br
.ti -1c
.RI "#define \fBMPS_CLASS_AVAILABLE_STARTING\fP(\&.\&.\&.)"
.br
.ti -1c
.RI "#define \fBMPS_AVAILABLE_STARTING\fP(\&.\&.\&.)"
.br
.ti -1c
.RI "#define \fBMPS_AVAILABLE_STARTING_BUT_DEPRECATED\fP(\&.\&.\&.)"
.br
.ti -1c
.RI "#define \fBMPS_SWIFT_NAME\fP(\&.\&.\&.)"
.br
.in -1c
.SS "Typedefs"

.in +1c
.ti -1c
.RI "typedef enum \fBMPSImageEdgeMode\fP \fBMPSImageEdgeMode\fP"
.br
.ti -1c
.RI "typedef enum \fBMPSImageFeatureChannelFormat\fP \fBMPSImageFeatureChannelFormat\fP"
.br
.ti -1c
.RI "typedef enum \fBMPSDataType\fP \fBMPSDataType\fP"
.br
.ti -1c
.RI "typedef struct \fBMPSOrigin\fP \fBMPSOrigin\fP"
.br
.ti -1c
.RI "typedef struct \fBMPSSize\fP \fBMPSSize\fP"
.br
.ti -1c
.RI "typedef struct \fBMPSRegion\fP \fBMPSRegion\fP"
.br
.ti -1c
.RI "typedef struct \fBMPSScaleTransform\fP \fBMPSScaleTransform\fP"
.br
.in -1c
.SS "Enumerations"

.in +1c
.ti -1c
.RI "enum \fBMPSKernelOptions\fP { \fBMPSKernelOptionsNone\fP, \fBMPSKernelOptionsSkipAPIValidation\fP, \fBMPSKernelOptionsAllowReducedPrecision\fP, \fBMPSKernelOptionsDisableInternalTiling\fP, \fBMPSKernelOptionsInsertDebugGroups\fP, \fBMPSKernelOptionsVerbose\fP }"
.br
.ti -1c
.RI "enum \fBMPSImageEdgeMode\fP { \fBMPSImageEdgeModeZero\fP, \fBMPSImageEdgeModeClamp\fP }"
.br
.ti -1c
.RI "enum \fBMPSImageFeatureChannelFormat\fP { \fBMPSImageFeatureChannelFormatNone\fP, \fBMPSImageFeatureChannelFormatUnorm8\fP, \fBMPSImageFeatureChannelFormatUnorm16\fP, \fBMPSImageFeatureChannelFormatFloat16\fP, \fBMPSImageFeatureChannelFormatFloat32\fP }"
.br
.ti -1c
.RI "enum \fBMPSDataType\fP { \fBMPSDataTypeInvalid\fP, \fBMPSDataTypeFloatBit\fP, \fBMPSDataTypeFloat32\fP, \fBMPSDataTypeFloat16\fP, \fBMPSDataTypeSignedBit\fP, \fBDEPRECATED_ATTRIBUTE\fP = MPSDataTypeSignedBit, \fBMPSDataTypeInt8\fP, \fBMPSDataTypeInt16\fP, \fBMPSDataTypeUInt8\fP, \fBMPSDataTypeUInt16\fP, \fBMPSDataTypeUInt32\fP, \fBMPSDataTypeNormalizedBit\fP, \fBMPSDataTypeUnorm1\fP, \fBMPSDataTypeUnorm8\fP }"
.br
.in -1c
.SH "Macro Definition Documentation"
.PP 
.SS "#define __has_attribute(a)   0"
MPSTypes\&.h  MPSCore 
.PP
\fBCopyright:\fP
.RS 4
Copyright (c) 2017 Apple Inc\&. All rights reserved\&.  Types common to MetalPerformanceShaders\&.framework 
.RE
.PP

.SS "#define __has_extension(e)   0"

.SS "#define __has_feature(f)   0"

.SS "#define MPS_AVAILABLE_STARTING( \&.\&.\&.)"

.SS "#define MPS_AVAILABLE_STARTING_BUT_DEPRECATED( \&.\&.\&.)"

.SS "#define MPS_CLASS_AVAILABLE_STARTING( \&.\&.\&.)"

.SS "#define MPS_ENUM_AVAILABLE_STARTING( \&.\&.\&.)"

.SS "#define MPS_ENUM_AVAILABLE_STARTING_BUT_DEPRECATED( \&.\&.\&.)"

.SS "#define MPS_HIDE_AVAILABILITY   1"

.SS "#define MPS_SWIFT_NAME( \&.\&.\&.)"

.SH "Typedef Documentation"
.PP 
.SS "typedef enum \fBMPSDataType\fP

     \fBMPSDataType\fP"

.SS "typedef enum \fBMPSImageEdgeMode\fP

     \fBMPSImageEdgeMode\fP"

.SS "typedef enum \fBMPSImageFeatureChannelFormat\fP

     \fBMPSImageFeatureChannelFormat\fP"

.SS "typedef struct \fBMPSOrigin\fP \fBMPSOrigin\fP"

.SS "typedef struct \fBMPSRegion\fP \fBMPSRegion\fP"

.SS "typedef struct \fBMPSScaleTransform\fP \fBMPSScaleTransform\fP"

.SS "typedef struct \fBMPSSize\fP \fBMPSSize\fP"

.SH "Enumeration Type Documentation"
.PP 
.SS "enum \fBMPSDataType\fP"
A value to specify a type of data\&.
.PP
MPSDataTypeFloatBit A common bit for all floating point data types\&. Zero for integer types  MPSDataTypeNormalizedBit If set, the value of the shall be interpreted as value / UNORM_TYPE_MAX Normalized values have range [0, 1\&.0] if unsigned and [-1,1] if signed\&. SNORM_TYPE_MIN is interpreted as SNORM_TYPE_MIN+1 per standard Metal rules\&.
.PP
MSPDataTypeFloat32 32-bit floating point (single-precision)\&.  MSPDataTypeFloat16 16-bit floating point (half-precision)\&. (IEEE-754-2008 float16 exchange format)  MPSDataTypeInt8 Signed 8-bit integer\&.  MPSDataTypeInt16 Signed 16-bit integer\&.  MPSDataTypeUInt8 Unsigned 8-bit integer\&. Not normalized  MPSDataTypeUInt16 Unsigned 16-bit integer\&. Not normalized  MPSDataTypeUInt32 Unsigned 32-bit integer\&. Not normalized  MPSDataTypeUnorm1 Unsigned 1-bit normalized value\&.  MPSDataTypeUnorm8 Unsigned 8-bit normalized value\&. 
.PP
\fBEnumerator\fP
.in +1c
.TP
\fB\fIMPSDataTypeInvalid \fP\fP
.TP
\fB\fIMPSDataTypeFloatBit \fP\fP
.TP
\fB\fIMPSDataTypeFloat32 \fP\fP
.TP
\fB\fIMPSDataTypeFloat16 \fP\fP
.TP
\fB\fIMPSDataTypeSignedBit \fP\fP
.TP
\fB\fIDEPRECATED_ATTRIBUTE \fP\fP
.TP
\fB\fIMPSDataTypeInt8 \fP\fP
.TP
\fB\fIMPSDataTypeInt16 \fP\fP
.TP
\fB\fIMPSDataTypeUInt8 \fP\fP
.TP
\fB\fIMPSDataTypeUInt16 \fP\fP
.TP
\fB\fIMPSDataTypeUInt32 \fP\fP
.TP
\fB\fIMPSDataTypeNormalizedBit \fP\fP
.TP
\fB\fIMPSDataTypeUnorm1 \fP\fP
.TP
\fB\fIMPSDataTypeUnorm8 \fP\fP
.SS "enum \fBMPSImageEdgeMode\fP"
Options used to control edge behaviour of filter when filter reads beyond boundary of src image 
.PP
\fBEnumerator\fP
.in +1c
.TP
\fB\fIMPSImageEdgeModeZero \fP\fP
Out of bound pixels are (0,0,0,1) for image with pixel format without alpha channel and (0,0,0,0) for image with pixel format that has an alpha channel 
.TP
\fB\fIMPSImageEdgeModeClamp \fP\fP
Out of bound pixels are clamped to nearest edge pixel 
.SS "enum \fBMPSImageFeatureChannelFormat\fP"
Encodes the representation of a single channel within a \fBMPSImage\fP\&.  A \fBMPSImage\fP pixel may have many channels in it, sometimes many more than 4, the limit of what MTLPixelFormats encode\&. The storage format for a single channel within a pixel can be given by the MPSImageFeatureChannelFormat\&. The number of channels is given by the featureChannels parameter of appropriate \fBMPSImage\fP APIs\&. The size of the pixel is size of the channel format multiplied by the number of feature channels\&. No padding is allowed, except to round out to a full byte\&. 
.PP
\fBEnumerator\fP
.in +1c
.TP
\fB\fIMPSImageFeatureChannelFormatNone \fP\fP
No format\&. This can mean according to context invalid format or any format\&. In the latter case, it is an invitation to MPS to pick a format\&. 
.TP
\fB\fIMPSImageFeatureChannelFormatUnorm8 \fP\fP
uint8_t with value [0,255] encoding [0,1\&.0] 
.TP
\fB\fIMPSImageFeatureChannelFormatUnorm16 \fP\fP
uint16_t with value [0,65535] encoding [0,1\&.0] 
.TP
\fB\fIMPSImageFeatureChannelFormatFloat16 \fP\fP
IEEE-754 16-bit floating-point value\&. 'half precision' Representable normal range is +-[2**-14, 65504], 0, Infinity, NaN\&. 11 bits of precision + exponent\&. 
.TP
\fB\fIMPSImageFeatureChannelFormatFloat32 \fP\fP
IEEE-754 32-bit floating-point value\&. 'single precision' (standard float type in C) 24 bits of precision + exponent 
.SS "enum \fBMPSKernelOptions\fP"
Options used when creating \fBMPSKernel\fP objects 
.PP
\fBEnumerator\fP
.in +1c
.TP
\fB\fIMPSKernelOptionsNone \fP\fP
Use default options 
.TP
\fB\fIMPSKernelOptionsSkipAPIValidation \fP\fP
Most MPS functions will sanity check their arguments\&. This has a small but non-zero CPU cost\&. Setting the MPSKernelOptionsSkipAPIValidation will skip these checks\&. MPSKernelOptionsSkipAPIValidation does not skip checks for memory allocation failure\&. Caution: turning on MPSKernelOptionsSkipAPIValidation can result in undefined behavior if the requested operation can not be completed for some reason\&. Most error states will be passed through to Metal which may do nothing or abort the program if Metal API validation is turned on\&. 
.TP
\fB\fIMPSKernelOptionsAllowReducedPrecision \fP\fP
When possible, MPSKernels use a higher precision data representation internally than the destination storage format to avoid excessive accumulation of computational rounding error in the result\&. MPSKernelOptionsAllowReducedPrecision advises the \fBMPSKernel\fP that the destination storage format already has too much precision for what is ultimately required downstream, and the \fBMPSKernel\fP may use reduced precision internally when it feels that a less precise result would yield better performance\&. The expected performance win is often small, perhaps 0-20%\&. When enabled, the precision of the result may vary by hardware and operating system\&. 
.TP
\fB\fIMPSKernelOptionsDisableInternalTiling \fP\fP
Some MPSKernels may automatically split up the work internally into multiple tiles\&. This improves performance on larger textures and reduces the amount of memory needed by MPS for temporary storage\&. However, if you are using your own tiling scheme to achieve similar results, your tile sizes and MPS's choice of tile sizes may interfere with one another causing MPS to subdivide your tiles for its own use inefficiently\&. Pass MPSKernelOptionsDisableInternalTiling to force MPS to process your data tile as a single chunk\&. 
.TP
\fB\fIMPSKernelOptionsInsertDebugGroups \fP\fP
Enabling this bit will cause various -encode\&.\&.\&. methods to call MTLCommandEncoder push/popDebugGroup\&. The debug string will be drawn from \fBMPSKernel\&.label\fP, if any or the name of the class otherwise\&. 
.TP
\fB\fIMPSKernelOptionsVerbose \fP\fP
Some parts of MPS can provide debug commentary and tuning advice when run\&. Setting this bit to 1 will cause the commentary to be emitted to stderr\&. Otherwise, the code is silent\&. This is especially useful for debugging \fBMPSNNGraph\fP\&. This option is on by default when the MPS_LOG_INFO environment variable is defined\&. For even more detailed output on a MPS object, you can use the po command in llvm with MPS objects: 
.PP
.nf
llvm>  po  <MPS object pointer>

.fi
.PP
 
.SH "Author"
.PP 
Generated automatically by Doxygen for MetalPerformanceShaders\&.framework from the source code\&.
