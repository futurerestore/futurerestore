.TH "<MPSCNNConvolutionDataSource >" 3 "Sun Jul 2 2017" "Version MetalPerformanceShaders-84.1" "MetalPerformanceShaders.framework" \" -*- nroff -*-
.ad l
.nh
.SH NAME
<MPSCNNConvolutionDataSource >
.SH SYNOPSIS
.br
.PP
.PP
\fC#import <MPSCNNConvolution\&.h>\fP
.PP
Inherits <MPSCNNConvolutionDescriptorNSObject>\&.
.SS "Instance Methods"

.in +1c
.ti -1c
.RI "(\fBMPSDataType\fP) \- \fBdataType\fP"
.br
.ti -1c
.RI "(\fBMPSCNNConvolutionDescriptor\fP *__nonnull) \- \fBdescriptor\fP"
.br
.ti -1c
.RI "(void *__nonnull) \- \fBweights\fP"
.br
.ti -1c
.RI "(float *__nullable) \- \fBbiasTerms\fP"
.br
.ti -1c
.RI "(BOOL) \- \fBload\fP"
.br
.ti -1c
.RI "(void) \- \fBpurge\fP"
.br
.ti -1c
.RI "(NSString *__nullable) \- \fBlabel\fP"
.br
.ti -1c
.RI "(vector_float2 *__nonnull) \- \fBrangesForUInt8Kernel\fP"
.br
.ti -1c
.RI "(float *__nonnull) \- \fBlookupTableForUInt8Kernel\fP"
.br
.in -1c
.SH "Method Documentation"
.PP 
.SS "\- (float * __nullable \fBMPSCNNConvolutionDataSource\fP) biasTerms \fC [required]\fP"
Returns a pointer to the bias terms for the convolution\&.  Each entry in the array is a single precision IEEE-754 float and represents one bias\&. The number of entries is equal to outputFeatureChannels\&.
.PP
Frequently, this function is a single line of code to return a pointer to memory allocated in -load\&. It may also just return nil\&.
.PP
Note: bias terms are always float, even when the weights are not\&. 
.SS "\- (\fBMPSDataType\fP \fBMPSCNNConvolutionDataSource\fP) dataType \fC [required]\fP"
Alerts MPS what sort of weights are provided by the object  For \fBMPSCNNConvolution\fP, MPSDataTypeUInt8, MPSDataTypeFloat16 and MPSDataTypeFloat32 are supported for normal convolutions using \fBMPSCNNConvolution\fP\&. \fBMPSCNNBinaryConvolution\fP assumes weights to be of type MPSDataTypeUInt32 always\&. 
.SS "\- (\fBMPSCNNConvolutionDescriptor\fP * __nonnull \fBMPSCNNConvolutionDataSource\fP) descriptor \fC [required]\fP"
Return a \fBMPSCNNConvolutionDescriptor\fP as needed  MPS will not modify this object other than perhaps to retain it\&. User should set the appropriate neuron in the creation of convolution descriptor and for batch normalization use: 
.PP
.nf
-setBatchNormalizationParametersForInferenceWithMean:variance:gamma:beta:epsilon:

.fi
.PP
.PP
\fBReturns:\fP
.RS 4
A \fBMPSCNNConvolutionDescriptor\fP that describes the kernel housed by this object\&. 
.RE
.PP

.SS "\- (NSString*__nullable \fBMPSCNNConvolutionDataSource\fP) label \fC [required]\fP"
A label that is transferred to the convolution at init time  Overridden by a \fBMPSCNNConvolutionNode\&.label\fP if it is non-nil\&. 
.SS "\- (BOOL \fBMPSCNNConvolutionDataSource\fP) load \fC [required]\fP"
Alerts the data source that the data will be needed soon  Each load alert will be balanced by a purge later, when MPS no longer needs the data from this object\&. Load will always be called atleast once after initial construction or each purge of the object before anything else is called\&. 
.PP
\fBReturns:\fP
.RS 4
Returns YES on success\&. If NO is returned, expect MPS object construction to fail\&. 
.RE
.PP

.SS "\- (float * __nonnull \fBMPSCNNConvolutionDataSource\fP) lookupTableForUInt8Kernel \fC [optional]\fP"
A pointer to a 256 entry lookup table containing the values to use for the weight range [0,255] 
.SS "\- (void \fBMPSCNNConvolutionDataSource\fP) purge \fC [required]\fP"
Alerts the data source that the data is no longer needed  Each load alert will be balanced by a purge later, when MPS no longer needs the data from this object\&. 
.SS "\- (vector_float2 * __nonnull \fBMPSCNNConvolutionDataSource\fP) rangesForUInt8Kernel \fC [optional]\fP"
A list of per-output channel limits that describe the 8-bit range  This returns a pointer to an array of vector_float2[outputChannelCount] values\&. The first value in the vector is the minimum value in the range\&. The second value in the vector is the maximum value in the range\&.
.PP
The 8-bit weight value is interpreted as: 
.PP
.nf
float unorm8_weight = uint8_weight / 255\&.0f;    // unorm8_weight has range [0,1\&.0]
float max = range[outputChannel]\&.y;
float min = range[outputChannel]\&.x;
float weight = unorm8_weight * (max - min) + min

.fi
.PP
 
.SS "\- (void * __nonnull \fBMPSCNNConvolutionDataSource\fP) weights \fC [required]\fP"
Returns a pointer to the weights for the convolution\&.  The type of each entry in array is given by -dataType\&. The number of entries is equal to: 
.PP
.nf
inputFeatureChannels * outputFeatureChannels * kernelHeight * kernelWidth

.fi
.PP
 The layout of filter weight is as a 4D tensor (array) weight[ outputChannels ][ kernelHeight ][ kernelWidth ][ inputChannels / groups ]
.PP
Frequently, this function is a single line of code to return a pointer to memory allocated in -load\&.
.PP
Batch normalization parameters are set using -descriptor\&.
.PP
Note: For binary-convolutions the layout of the weights are: weight[ outputChannels ][ kernelHeight ][ kernelWidth ][ floor((inputChannels/groups)+31) / 32 ] with each 32 sub input feature channel index specified in machine byte order, so that for example the 13th feature channel bit can be extracted using bitmask = (1U << 13)\&. 

.SH "Author"
.PP 
Generated automatically by Doxygen for MetalPerformanceShaders\&.framework from the source code\&.
