.\" Automatically generated by Pod::Man 2.27 (Pod::Simple 3.28)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Components 3"
.TH Components 3 "2017-07-07" "perl v5.18.2" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Mac::Components \- Macintosh Toolbox Interface to the Components Manager
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 4
\&        use Mac::Components;
\&        RegisterComponentResource($Resource, 1);
\&        OpenComponent($Component);
\&        CloseComponent($Component);
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
.SS "Constants"
.IX Subsection "Constants"
.IP "kAppleManufacturer" 4
.IX Item "kAppleManufacturer"
.PD 0
.IP "kComponentResourceType" 4
.IX Item "kComponentResourceType"
.IP "kAnyComponentType" 4
.IX Item "kAnyComponentType"
.IP "kAnyComponentSubType" 4
.IX Item "kAnyComponentSubType"
.IP "kAnyComponentManufacturer" 4
.IX Item "kAnyComponentManufacturer"
.IP "kAnyComponentFlagsMask" 4
.IX Item "kAnyComponentFlagsMask"
.PD
Default values for \f(CW\*(C`GetDefaultComponent()\*(C'\fR.
.IP "defaultComponentIdentical" 4
.IX Item "defaultComponentIdentical"
.PD 0
.IP "defaultComponentAnyFlags" 4
.IX Item "defaultComponentAnyFlags"
.IP "defaultComponentAnyManufacturer" 4
.IX Item "defaultComponentAnyManufacturer"
.IP "defaultComponentAnySubType" 4
.IX Item "defaultComponentAnySubType"
.IP "defaultComponentAnyFlagsAnyManufacturer" 4
.IX Item "defaultComponentAnyFlagsAnyManufacturer"
.IP "defaultComponentAnyFlagsAnyManufacturerAnySubType" 4
.IX Item "defaultComponentAnyFlagsAnyManufacturerAnySubType"
.PD
Flags for \f(CW\*(C`GetDefaultComponent()\*(C'\fR.
.IP "kComponentOpenSelect" 4
.IX Item "kComponentOpenSelect"
.PD 0
.IP "kComponentCloseSelect" 4
.IX Item "kComponentCloseSelect"
.IP "kComponentCanDoSelect" 4
.IX Item "kComponentCanDoSelect"
.IP "kComponentVersionSelect" 4
.IX Item "kComponentVersionSelect"
.IP "kComponentRegisterSelect" 4
.IX Item "kComponentRegisterSelect"
.IP "kComponentTargetSelect" 4
.IX Item "kComponentTargetSelect"
.IP "kComponentUnregisterSelect" 4
.IX Item "kComponentUnregisterSelect"
.PD
Standard component selectors.
.IP "registerComponentGlobal" 4
.IX Item "registerComponentGlobal"
.PD 0
.IP "registerComponentNoDuplicates" 4
.IX Item "registerComponentNoDuplicates"
.IP "registerComponentAfterExisting" 4
.IX Item "registerComponentAfterExisting"
.PD
Flags for \f(CW\*(C`SetDefaultComponent()\*(C'\fR.
.SS "Functions"
.IX Subsection "Functions"
.IP "RegisterComponentResource \s-1TR, GLOBAL\s0" 4
.IX Item "RegisterComponentResource TR, GLOBAL"
The RegisterComponentResource function makes a component available for use by
applications (or other clients). Once the Component Manager has registered a
component, applications can find and open the component using the standard
Component Manager routines. You provide information identifying the component and
specifying its capabilities. The Component Manager returns a component identifier
that uniquely identifies the component to the system.
.IP "UnregisterComponent \s-1ACOMPONENT\s0" 4
.IX Item "UnregisterComponent ACOMPONENT"
The UnregisterComponent function removes a component from the Component ManagerO\*~s
registration list. Most components are registered at startup and remain
registered until the computer is shut down. However, you may want to provide some
services temporarily. In that case you dispose of the component that provides the
temporary service by using this function.
Returns zero on failure.
.IP "FindNextComponent \s-1ACOMPONENT,\s0 [\s-1COMPONENTTYPE,\s0 [\s-1COMPONENTSUBTYPE,\s0 [\s-1COMPONENTMANUFACTURER,\s0 [\s-1COMPONENTFLAGS,\s0 [\s-1COMPONENTFLAGSMASK\s0]]]]]" 4
.IX Item "FindNextComponent ACOMPONENT, [COMPONENTTYPE, [COMPONENTSUBTYPE, [COMPONENTMANUFACTURER, [COMPONENTFLAGS, [COMPONENTFLAGSMASK]]]]]"
The FindNextComponent function returns the component identifier of a component
that meets the search criteria. FindNextComponent returns a function result of 0
when there are no more matching components.
.IP "CountComponents [\s-1COMPONENTTYPE,\s0 [\s-1COMPONENTSUBTYPE,\s0 [\s-1COMPONENTMANUFACTURER,\s0 [\s-1COMPONENTFLAGS,\s0 [\s-1COMPONENTFLAGSMASK\s0]]]]]" 4
.IX Item "CountComponents [COMPONENTTYPE, [COMPONENTSUBTYPE, [COMPONENTMANUFACTURER, [COMPONENTFLAGS, [COMPONENTFLAGSMASK]]]]]"
The CountComponents function returns a long integer containing the number of
components that meet the specified search criteria.
.IP "GetComponentInfo \s-1ACOMPONENT\s0" 4
.IX Item "GetComponentInfo ACOMPONENT"
The GetComponentInfo function returns information about the specified component.
.Sp
.Vb 2
\&        ($type, $subtype, $manufacturer, $flags, $mask, $name, $info) =
\&                GetComponentInfo($Component);
.Ve
.IP "GetComponentListModSeed" 4
.IX Item "GetComponentListModSeed"
The GetComponentListModSeed function allows you to determine if the list of
registered components has changed. This function returns the value of the
component registration seed number.
.IP "OpenComponent \s-1ACOMPONENT\s0" 4
.IX Item "OpenComponent ACOMPONENT"
The OpenComponent function allows your application to gain access to the services
provided by a component. Your application must open a component before it can
call any component functions. You specify the component with a component
identifier that your application previously obtained from the FindNextComponent
function.
Returns ComponentInstance.
.IP "CloseComponent \s-1ACOMPONENTINSTANCE\s0" 4
.IX Item "CloseComponent ACOMPONENTINSTANCE"
The CloseComponent function terminates your applicationO\*~s access to the services
provided by a component. Your application specifies the connection to be closed
with the component instance returned by the \fIOpenComponent()\fR or \fIOpenDefaultComponent()\fR
function.
Returns zero on failure.
.IP "GetComponentInstanceError \s-1ACOMPONENTINSTANCE\s0" 4
.IX Item "GetComponentInstanceError ACOMPONENTINSTANCE"
The GetComponentInstanceError function returns the last error generated by a
specific connection to a component.
Returns zero on failure.
.IP "ComponentFunctionImplemented \s-1CI, FTNNUMBER\s0" 4
.IX Item "ComponentFunctionImplemented CI, FTNNUMBER"
The ComponentFunctionImplemented function allows you to determine whether a
component supports a specified request. Your application can use this function to
determine a componentO\*~s capabilities. 
Returns 1 if supported.
.IP "GetComponentVersion \s-1CI\s0" 4
.IX Item "GetComponentVersion CI"
The GetComponentVersion function returns a componentO\*~s version number
as a coded integer.
.IP "SetDefaultComponent \s-1ACOMPONENT, FLAGS\s0" 4
.IX Item "SetDefaultComponent ACOMPONENT, FLAGS"
The SetDefaultComponent function allows your component to change the search order
for registered components. You specify a component that is to be placed at the
front of the search chain, along with control information that governs the
reordering operation. The order of the search chain influences which component
the Component Manager selects in response to an applicationO\*~s use of the
\&\fIOpenDefaultComponent()\fR and \fIFindNextComponent()\fR functions.
Returns zero on failure.
.IP "OpenDefaultComponent \s-1COMPONENTTYPE,\s0 [\s-1COMPONENTSUBTYPE\s0]" 4
.IX Item "OpenDefaultComponent COMPONENTTYPE, [COMPONENTSUBTYPE]"
The OpenDefaultComponent function allows your application to gain access to the
services provided by a component. Your application must open a component before
it can call any component functions. You specify the component type and subtype
values of the component to open. The Component Manager searches for a component
that meets those criteria. If you want to exert more control over the selection
process, you can use the \fIFindNextComponent()\fR and \fIOpenComponent()\fR functions.
Returns ComponentInstance.
.IP "RegisterComponentResourceFile \s-1RESREFNUM, GLOBAL\s0" 4
.IX Item "RegisterComponentResourceFile RESREFNUM, GLOBAL"
The RegisterComponentResourceFile function registers all component resources in
the given resource file according to the flags specified in the global parameter.
Returns an integer value.
.SH "AUTHOR"
.IX Header "AUTHOR"
Written by Matthias Ulrich Neeracher <neeracher@mac.com>,
documentation by Bob Dalgleish <bob.dalgleish@sasknet.sk.ca>.
Currently maintained by Chris Nandor <pudge@pobox.com>.
.SH "POD ERRORS"
.IX Header "POD ERRORS"
Hey! \fBThe above document had some coding errors, which are explained below:\fR
.IP "Around line 87:" 4
.IX Item "Around line 87:"
Non-ASCII character seen before =encoding in 'ManagerO\*~s'. Assuming \s-1ISO8859\-1\s0
