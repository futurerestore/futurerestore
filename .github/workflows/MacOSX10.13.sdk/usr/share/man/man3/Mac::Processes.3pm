.\" Automatically generated by Pod::Man 2.27 (Pod::Simple 3.28)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Processes 3"
.TH Processes 3 "2017-07-07" "perl v5.18.2" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Mac::Processes \- Macintosh Toolbox Interface to Process Manager
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&    use Mac::Processes;
\&
\&    while ( ($psn, $psi) = each(%Process) ) {
\&        print "$psn\et", 
\&               $psi\->processName,       " ", 
\&               $psi\->processNumber,     " ", 
\&               $psi\->processType,       " ", 
\&               $psi\->processSignature,  " ", 
\&               $psi\->processSize,       " ", 
\&               $psi\->processMode,       " ", 
\&               $psi\->processLocation,   " ", 
\&               $psi\->processLauncher,   " ", 
\&               $psi\->processLaunchDate, " ", 
\&               $psi\->processActiveTime, " ", 
\&               $psi\->processAppSpec,    "\en";
\&    }
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
Access to Inside Macintosh is essential for proper use of these functions.
Explanations of terms, processes and procedures are provided there.
Any attempt to use these functions without guidance can cause severe errors in 
your machine, including corruption of data. \fBYou have been warned.\fR
.SS "Constants"
.IX Subsection "Constants"
.IP "kNoProcess" 4
.IX Item "kNoProcess"
.PD 0
.IP "kSystemProcess" 4
.IX Item "kSystemProcess"
.IP "kCurrentProcess" 4
.IX Item "kCurrentProcess"
.PD
Special process IDs.
.IP "launchContinue" 4
.IX Item "launchContinue"
.PD 0
.IP "launchNoFileFlags" 4
.IX Item "launchNoFileFlags"
.IP "launchUseMinimum" 4
.IX Item "launchUseMinimum"
.IP "launchDontSwitch" 4
.IX Item "launchDontSwitch"
.IP "launchAllow24Bit" 4
.IX Item "launchAllow24Bit"
.IP "launchInhibitDaemon" 4
.IX Item "launchInhibitDaemon"
.PD
Launch flags.
.IP "modeDeskAccessory" 4
.IX Item "modeDeskAccessory"
.PD 0
.IP "modeMultiLaunch" 4
.IX Item "modeMultiLaunch"
.IP "modeNeedSuspendResume" 4
.IX Item "modeNeedSuspendResume"
.IP "modeCanBackground" 4
.IX Item "modeCanBackground"
.IP "modeDoesActivateOnFGSwitch" 4
.IX Item "modeDoesActivateOnFGSwitch"
.IP "modeOnlyBackground" 4
.IX Item "modeOnlyBackground"
.IP "modeGetFrontClicks" 4
.IX Item "modeGetFrontClicks"
.IP "modeGetAppDiedMsg" 4
.IX Item "modeGetAppDiedMsg"
.IP "mode32BitCompatible" 4
.IX Item "mode32BitCompatible"
.IP "modeHighLevelEventAware" 4
.IX Item "modeHighLevelEventAware"
.IP "modeLocalAndRemoteHLEvents" 4
.IX Item "modeLocalAndRemoteHLEvents"
.IP "modeStationeryAware" 4
.IX Item "modeStationeryAware"
.IP "modeUseTextEditServices" 4
.IX Item "modeUseTextEditServices"
.IP "modeDisplayManagerAware" 4
.IX Item "modeDisplayManagerAware"
.PD
Mode flags in \s-1SIZE\s0 resource.
.SS "LaunchParam"
.IX Subsection "LaunchParam"
This Perl hash maps onto the fields of a Launch Parameter Block.
.PP
The fields are:
.PP
.Vb 7
\&    launchFileFlags
\&    launchControlFlags
\&    launchAppSpec
\&    launchAvailableSize
\&    launchProcessSN
\&    launchPreferredSize
\&    launchMinimumSize
.Ve
.IP "new LaunchParam [\s-1ARGUMENTS\s0]" 4
.IX Item "new LaunchParam [ARGUMENTS]"
Returns LaunchParam.
.Sp
.Vb 2
\&    $launch = 
\&        new LaunchParam(launchAppSpec =E<gt> "hd:apps:myapp", launchMinimumSize => 32000);
.Ve
.IP "\s-1DESTROY LPB\s0" 4
.IX Item "DESTROY LPB"
.SS "ProcessInfo"
.IX Subsection "ProcessInfo"
This Perl hash allows access to the \f(CW\*(C`ProcessInfo\*(C'\fR structure.
.PP
The field names are:
.PP
.Vb 11
\&    processName
\&    processNumber
\&    processType
\&    processSignature
\&    processSize
\&    processMode
\&    processLocation
\&    processLauncher
\&    processLaunchDate
\&    processActiveTime
\&    processAppSpec
.Ve
.IP "\s-1DESTROY PI\s0" 4
.IX Item "DESTROY PI"
.SS "Functions"
.IX Subsection "Functions"
.PD 0
.IP "LaunchApplication \s-1LAUNCHPARAMS\s0" 4
.IX Item "LaunchApplication LAUNCHPARAMS"
.PD
The LaunchApplication function launches the application from the specified file
and returns the process serial number if the application is successfully launched.
Returns undef on failure.
.IP "LaunchDeskAccessory \s-1PFILESPEC, PDANAME\s0" 4
.IX Item "LaunchDeskAccessory PFILESPEC, PDANAME"
\&\fBMac \s-1OS\s0 only.\fR
.Sp
The LaunchDeskAccessory function searches the resource fork of the file specified
by the pFileSpec parameter for the desk accessory with the '\s-1DRVR\s0' resource name
specified in the pDAName parameter. If the '\s-1DRVR\s0' resource name is found,
LaunchDeskAccessory launches the corresponding desk accessory. If the desk
accessory is already open, it is brought to the front.
Returns zero on failure.
.IP "GetCurrentProcess" 4
.IX Item "GetCurrentProcess"
The GetCurrentProcess function returns the process serial
number of the process that is currently running, that is, the one currently
accessing the \s-1CPU.\s0
Return \f(CW\*(C`undef\*(C'\fR if an error was detected.
.IP "GetFrontProcess" 4
.IX Item "GetFrontProcess"
The GetFrontProcess function returns the process serial
number of the process running in the foreground.
Return \f(CW\*(C`undef\*(C'\fR if an error was detected.
.IP "GetNextProcess \s-1PSN\s0" 4
.IX Item "GetNextProcess PSN"
Get information about the next process, if any, in the Process ManagerO\*~s internal
list of open processes.
Return \f(CW\*(C`undef\*(C'\fR if an error was detected.
.IP "GetProcessInformation \s-1PSN\s0" 4
.IX Item "GetProcessInformation PSN"
The GetProcessInformation function returns, in a process information record,
information about the specified process. The information returned in the info
parameter includes the applicationO\*~s name as it appears in the Application menu,
the type and signature of the application, the address of the application
partition, the number of bytes in the application partition, the number of free
bytes in the application heap, the application that launched the application, the
time at which the application was launched, and the location of the application
file.
Return \f(CW\*(C`undef\*(C'\fR if an error was detected.
.IP "SetFrontProcess \s-1PSN\s0" 4
.IX Item "SetFrontProcess PSN"
The SetFrontProcess function schedules the specified process to move to the
foreground. The specified process moves to the foreground after the current
foreground process makes a subsequent call to WaitNextEvent or EventAvail.
Returns zero on failure.
.IP "WakeUpProcess \s-1PSN\s0" 4
.IX Item "WakeUpProcess PSN"
The WakeUpProcess function makes a process suspended by \fIWaitNextEvent()\fR eligible to
receive \s-1CPU\s0 time. A process is suspended when the value of the sleep parameter in
the \fIWaitNextEvent()\fR function is not 0 and no events for that process are pending in
the event queue. This process remains suspended until the time specified in the
sleep parameter expires or an event becomes available for that process. You can
use WakeUpProcess to make the process eligible for execution before the time
specified in the sleep parameter expires.
Returns zero on failure.
.IP "SameProcess \s-1PSN1, PSN2\s0" 4
.IX Item "SameProcess PSN1, PSN2"
The SameProcess function compares two process serial numbers and determines
whether they refer to the same process.
Return \f(CW\*(C`undef\*(C'\fR if an error was detected.
.IP "ExitToShell" 4
.IX Item "ExitToShell"
This function is not implemented: \fIExitToShell()\fR unsupported. Use exit.
.IP "GetProcessPID(\s-1PSN\s0)" 4
.IX Item "GetProcessPID(PSN)"
\&\fBMac \s-1OS X\s0 only.\fR
.Sp
Get the \s-1UNIX\s0 process \s-1ID\s0 corresponding to a process serial number.
.IP "GetProcessForPID(\s-1PID\s0)" 4
.IX Item "GetProcessForPID(PID)"
\&\fBMac \s-1OS X\s0 only.\fR
.Sp
Get the process serial number corresponding to a \s-1UNIX\s0 process \s-1ID.\s0
.IP "LSFindApplicationForInfo(creator, bundleID=NULL, name=NULL)" 4
.IX Item "LSFindApplicationForInfo(creator, bundleID=NULL, name=NULL)"
\&\fBMac \s-1OS X\s0 only.\fR
.Sp
Return the path to the application matching one or more of creator,
bundleID, and name.  Pass undef or empty string for unused parameters.
.Sp
.Vb 4
\&        $path = LSFindApplicationForInfo("R*ch");
\&        $path = LSFindApplicationForInfo(undef, "com.barebones.bbedit");
\&        $path = LSFindApplicationForInfo(undef, undef, "BBEdit.app");
\&        $path = LSFindApplicationForInfo("R*ch", "com.barebones.bbedit", "BBEdit.app");
.Ve
.SH "AUTHOR"
.IX Header "AUTHOR"
Written by Matthias Ulrich Neeracher <neeracher@mac.com>,
documentation by Bob Dalgleish <bob.dalgleish@sasknet.sk.ca>.
Currently maintained by Chris Nandor <pudge@pobox.com>.
.SH "POD ERRORS"
.IX Header "POD ERRORS"
Hey! \fBThe above document had some coding errors, which are explained below:\fR
.IP "Around line 176:" 4
.IX Item "Around line 176:"
Non-ASCII character seen before =encoding in 'ManagerO\*~s'. Assuming \s-1ISO8859\-1\s0
