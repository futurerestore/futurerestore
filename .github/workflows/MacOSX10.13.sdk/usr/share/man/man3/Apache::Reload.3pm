.\" Automatically generated by Pod::Man 2.27 (Pod::Simple 3.28)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Apache::Reload 3"
.TH Apache::Reload 3 "2015-06-18" "perl v5.18.2" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Apache::Reload \- Reload changed modules
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
In httpd.conf:
.PP
.Vb 2
\&  PerlInitHandler Apache::Reload
\&  PerlSetVar ReloadAll Off
.Ve
.PP
Then your module:
.PP
.Vb 1
\&  package My::Apache::Module;
\&
\&  use Apache::Reload;
\&  
\&  sub handler { ... }
\&  
\&  1;
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This module is two things. First it is an adaptation of Randal
Schwartz's Stonehenge::Reload module that attempts to be a little 
more intuitive and makes the usage easier. Stonehenge::Reload was
written by Randal to make specific modules reload themselves when
they changed. Unlike Apache::StatINC, Stonehenge::Reload only checked
the change time of modules that registered themselves with 
Stonehenge::Reload, thus reducing \fIstat()\fR calls. Apache::Reload also
offers the exact same functionality as Apache::StatINC, and is thus
designed to be a drop-in replacement. Apache::Reload only checks modules
that register themselves with Apache::Reload if you explicitly turn off
the StatINC emulation method (see below). Like Apache::StatINC,
Apache::Reload must be installed as an Init Handler.
.SS "StatINC Replacement"
.IX Subsection "StatINC Replacement"
To use as a StatINC replacement, simply add the following configuration
to your httpd.conf:
.PP
.Vb 1
\&  PerlInitHandler Apache::Reload
.Ve
.SS "Register Modules Implicitly"
.IX Subsection "Register Modules Implicitly"
To only reload modules that have registered with Apache::Reload,
add the following to the httpd.conf:
.PP
.Vb 3
\&  PerlInitHandler Apache::Reload
\&  PerlSetVar ReloadAll Off
\&  # ReloadAll defaults to On
.Ve
.PP
Then any modules with the line:
.PP
.Vb 1
\&  use Apache::Reload;
.Ve
.PP
Will be reloaded when they change.
.SS "Register Modules Explicitly"
.IX Subsection "Register Modules Explicitly"
You can also register modules explicitly in your httpd.conf file that
you want to be reloaded on change:
.PP
.Vb 3
\&  PerlInitHandler Apache::Reload
\&  PerlSetVar ReloadAll Off
\&  PerlSetVar ReloadModules "My::Foo My::Bar Foo::Bar::Test"
.Ve
.PP
Note that these are split on whitespace, but the module list \fBmust\fR
be in quotes, otherwise Apache tries to parse the parameter list.
.SS "Un-Register Modules Explicitly"
.IX Subsection "Un-Register Modules Explicitly"
If ReloadAll is set to On, then you can explicity force a module not to be reloaded with
.PP
.Vb 1
\&  no Apache::Reload;
.Ve
.PP
A warning will appear in the error log that the file has changed, but will
not be reloaded
.ie n .SS "Special ""Touch"" File"
.el .SS "Special ``Touch'' File"
.IX Subsection "Special Touch File"
You can also set a file that you can \fItouch()\fR that causes the reloads to be
performed. If you set this, and don't \fItouch()\fR the file, the reloads don't
happen. This can be a great boon in a live environment:
.PP
.Vb 1
\&  PerlSetVar ReloadTouchFile /tmp/reload_modules
.Ve
.PP
Now when you're happy with your changes, simply go to the command line and
type:
.PP
.Vb 1
\&  touch /tmp/reload_modules
.Ve
.PP
And your modules will be magically reloaded on the next request. This option
works in both StatINC emulation mode and the registered modules mode.
.SH "PSUEDOHASHES"
.IX Header "PSUEDOHASHES"
The short summary of this is: Don't use psuedohashes. Use an array with
constant indexes. Its faster in the general case, its more guaranteed, and
generally, it works.
.PP
The long summary is that I've done some work to get this working with
modules that use psuedo hashes, but its still broken in the case of a
single module that contains multiple packages that all use psuedohashes.
.PP
So don't do that.
.SH "AUTHOR"
.IX Header "AUTHOR"
Matt Sergeant, matt@sergeant.org
.SH "MAINTAINERS"
.IX Header "MAINTAINERS"
the mod_perl developers, dev@perl.apache.org
.SH "SEE ALSO"
.IX Header "SEE ALSO"
Apache::StatINC, Stonehenge::Reload
