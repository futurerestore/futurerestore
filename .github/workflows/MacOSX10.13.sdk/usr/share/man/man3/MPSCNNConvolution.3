.TH "MPSCNNConvolution" 3 "Sun Jul 2 2017" "Version MetalPerformanceShaders-84.1" "MetalPerformanceShaders.framework" \" -*- nroff -*-
.ad l
.nh
.SH NAME
MPSCNNConvolution
.SH SYNOPSIS
.br
.PP
.PP
\fC#import <MPSCNNConvolution\&.h>\fP
.PP
Inherits \fBMPSCNNKernel\fP\&.
.PP
Inherited by \fBMPSCNNFullyConnected\fP\&.
.SS "Instance Methods"

.in +1c
.ti -1c
.RI "(nonnull instancetype) \- \fBinitWithDevice:convolutionDescriptor:kernelWeights:biasTerms:flags:\fP"
.br
.ti -1c
.RI "(nonnull instancetype) \- \fBinitWithDevice:weights:\fP"
.br
.ti -1c
.RI "(nullable instancetype) \- \fBinitWithCoder:device:\fP"
.br
.ti -1c
.RI "(nonnull instancetype) \- \fBinitWithDevice:\fP"
.br
.ti -1c
.RI "(void) \- \fBencodeToCommandBuffer:sourceImage:destinationImage:state:\fP"
.br
.in -1c
.SS "Properties"

.in +1c
.ti -1c
.RI "NSUInteger \fBinputFeatureChannels\fP"
.br
.ti -1c
.RI "NSUInteger \fBoutputFeatureChannels\fP"
.br
.ti -1c
.RI "NSUInteger \fBgroups\fP"
.br
.ti -1c
.RI "NSUInteger \fBsubPixelScaleFactor\fP"
.br
.ti -1c
.RI "NSUInteger \fBdilationRate\fP"
.br
.ti -1c
.RI "NSUInteger \fBdilationRateX\fP"
.br
.ti -1c
.RI "NSUInteger \fBdilationRateY\fP"
.br
.ti -1c
.RI "const \fBMPSCNNNeuron\fP *__nullable \fBneuron\fP"
.br
.ti -1c
.RI "const \fBMPSCNNNeuron\fP *__nullable \fBMPSCNNNeuronType\fP \fBneuronType\fP"
.br
.ti -1c
.RI "float \fBneuronParameterA\fP"
.br
.ti -1c
.RI "float \fBneuronParameterB\fP"
.br
.ti -1c
.RI "NSUInteger \fBchannelMultiplier\fP"
.br
.in -1c
.SS "Additional Inherited Members"
.SH "Detailed Description"
.PP 
This depends on Metal\&.framework  The \fBMPSCNNConvolution\fP specifies a convolution\&. The \fBMPSCNNConvolution\fP convolves the input image with a set of filters, each producing one feature map in the output image\&. 
.SH "Method Documentation"
.PP 
.SS "\- (void) encodeToCommandBuffer: (nonnull id< MTLCommandBuffer >) commandBuffer(\fBMPSImage\fP *__nonnull) sourceImage(\fBMPSImage\fP *__nonnull) destinationImage(__autoreleasing \fBMPSCNNConvolutionState\fP *__nonnull *__nonnull) outState"
Encode a \fBMPSCNNKernel\fP into a command Buffer\&. The operation shall proceed out-of-place\&. 
.PP
\fBParameters:\fP
.RS 4
\fIcommandBuffer\fP A valid MTLCommandBuffer to receive the encoded filter 
.br
\fIsourceImage\fP A valid \fBMPSImage\fP object containing the source image\&. 
.br
\fIdestinationImage\fP A valid \fBMPSImage\fP to be overwritten by result image\&. destinationImage may not alias sourceImage\&. 
.br
\fIoutState\fP A pointer to recieve a state that is consumed by MPSCNNConvolutionTranspose\&. 
.RE
.PP

.SS "\- (nullable instancetype) \fBinitWithCoder:\fP (NSCoder *__nonnull) aDecoder(nonnull id< MTLDevice >) device"
\fBNSSecureCoding\fP compatability  While the standard NSSecureCoding/NSCoding method -initWithCoder: should work, since the file can't know which device your data is allocated on, we have to guess and may guess incorrectly\&. To avoid that problem, use initWithCoder:device instead\&. 
.PP
\fBParameters:\fP
.RS 4
\fIaDecoder\fP The NSCoder subclass with your serialized \fBMPSKernel\fP 
.br
\fIdevice\fP The MTLDevice on which to make the \fBMPSKernel\fP 
.RE
.PP
\fBReturns:\fP
.RS 4
A new \fBMPSKernel\fP object, or nil if failure\&. 
.RE
.PP

.PP
Reimplemented from \fBMPSCNNKernel\fP\&.
.PP
Reimplemented in \fBMPSCNNFullyConnected\fP\&.
.SS "\- (nonnull instancetype) initWithDevice: (nonnull id< MTLDevice >) device"
Standard init with default properties per filter type 
.PP
\fBParameters:\fP
.RS 4
\fIdevice\fP The device that the filter will be used on\&. May not be NULL\&. 
.RE
.PP
\fBReturns:\fP
.RS 4
A pointer to the newly initialized object\&. This will fail, returning nil if the device is not supported\&. Devices must be MTLFeatureSet_iOS_GPUFamily2_v1 or later\&. 
.RE
.PP

.PP
Reimplemented from \fBMPSCNNKernel\fP\&.
.PP
Reimplemented in \fBMPSCNNFullyConnected\fP\&.
.SS "\- (nonnull instancetype) \fBinitWithDevice:\fP (nonnull id< MTLDevice >) device(const \fBMPSCNNConvolutionDescriptor\fP *__nonnull) convolutionDescriptor(const float *__nonnull) kernelWeights(const float *__nullable) biasTerms(\fBMPSCNNConvolutionFlags\fP) flags"
Initializes a convolution kernel 
.PP
\fBParameters:\fP
.RS 4
\fIdevice\fP The MTLDevice on which this \fBMPSCNNConvolution\fP filter will be used 
.br
\fIconvolutionDescriptor\fP A pointer to a \fBMPSCNNConvolutionDescriptor\fP\&. 
.br
\fIkernelWeights\fP A pointer to a weights array\&. Each entry is a float value\&. The number of entries is = inputFeatureChannels * outputFeatureChannels * kernelHeight * kernelWidth The layout of filter weight is so that it can be reinterpreted as 4D tensor (array) weight[ outputChannels ][ kernelHeight ][ kernelWidth ][ inputChannels / groups ] Weights are converted to half float (fp16) internally for best performance\&. 
.br
\fIbiasTerms\fP A pointer to bias terms to be applied to the convolution output\&. Each entry is a float value\&. The number of entries is = numberOfOutputFeatureMaps 
.br
\fIflags\fP Currently unused\&. Pass MPSCNNConvolutionFlagsNone
.RE
.PP
\fBReturns:\fP
.RS 4
A valid \fBMPSCNNConvolution\fP object or nil, if failure\&. 
.RE
.PP

.PP
Reimplemented in \fBMPSCNNFullyConnected\fP\&.
.SS "\- (nonnull instancetype) \fBinitWithDevice:\fP (nonnull id< MTLDevice >) device(nonnull id< \fBMPSCNNConvolutionDataSource\fP >) weights"
Initializes a convolution kernel 
.PP
\fBParameters:\fP
.RS 4
\fIdevice\fP The MTLDevice on which this \fBMPSCNNConvolution\fP filter will be used 
.br
\fIweights\fP A pointer to a object that conforms to the \fBMPSCNNConvolutionDataSource\fP protocol\&. The \fBMPSCNNConvolutionDataSource\fP protocol declares the methods that an instance of \fBMPSCNNConvolution\fP uses to obtain the weights and bias terms for the CNN convolution filter\&.
.RE
.PP
\fBReturns:\fP
.RS 4
A valid \fBMPSCNNConvolution\fP object or nil, if failure\&. 
.RE
.PP

.PP
Reimplemented in \fBMPSCNNFullyConnected\fP\&.
.SH "Property Documentation"
.PP 
.SS "\- (NSUInteger) channelMultiplier\fC [read]\fP, \fC [nonatomic]\fP, \fC [assign]\fP"
Channel multiplier\&.  For convolution created with \fBMPSCNNDepthWiseConvolutionDescriptor\fP, it is the number of output feature channels for each input channel\&. See \fBMPSCNNDepthWiseConvolutionDescriptor\fP for more details\&. Default is 0 which means regular CNN convolution\&. 
.SS "\- dilationRate\fC [read]\fP, \fC [nonatomic]\fP, \fC [assign]\fP"
Dilation rate which was passed in as part of \fBMPSCNNConvolutionDescriptor\fP when creating this \fBMPSCNNConvolution\fP object\&. WARNING: This is deprecated\&. Please use dilationRateX and dilationRateY instead\&.
.PP
Dilation rate which was passed in as part of \fBMPSCNNConvolutionDescriptor\fP when creating this \fBMPSCNNConvolution\fP object\&. 
.SS "\- dilationRateX\fC [read]\fP, \fC [nonatomic]\fP, \fC [assign]\fP"
Dilation rate which was passed in as part of \fBMPSCNNConvolutionDescriptor\fP when creating this \fBMPSCNNConvolution\fP object\&. 
.SS "\- (NSUInteger) dilationRateY\fC [read]\fP, \fC [nonatomic]\fP, \fC [assign]\fP"

.SS "\- groups\fC [read]\fP, \fC [nonatomic]\fP, \fC [assign]\fP"
Number of groups input and output channels are divided into\&. 
.SS "\- inputFeatureChannels\fC [read]\fP, \fC [nonatomic]\fP, \fC [assign]\fP"
The number of feature channels per pixel in the input image\&. 
.SS "\- neuron\fC [read]\fP, \fC [nonatomic]\fP, \fC [assign]\fP"
\fBMPSCNNNeuron\fP filter to be applied as part of convolution\&. Can be nil in wich case no neuron activation fuction is applied\&. 
.SS "\- (float) neuronParameterA\fC [read]\fP, \fC [nonatomic]\fP, \fC [assign]\fP"
Parameter 'a' for the neuron\&. Default: 1\&.0f  Please see class description for interpretation of a\&. 
.SS "\- (float) neuronParameterB\fC [read]\fP, \fC [nonatomic]\fP, \fC [assign]\fP"
Parameter 'b' for the neuron\&. Default: 1\&.0f  Please see class description for interpretation of b\&. 
.SS "\- (const \fBMPSCNNNeuron\fP* __nullable \fBMPSCNNNeuronType\fP) neuronType\fC [read]\fP, \fC [nonatomic]\fP, \fC [assign]\fP"
The type of neuron to append to the convolution  Please see class description for a full list\&. Default is MPSCNNNeuronTypeNone\&. 
.SS "\- outputFeatureChannels\fC [read]\fP, \fC [nonatomic]\fP, \fC [assign]\fP"
The number of feature channels per pixel in the output image\&. 
.SS "\- subPixelScaleFactor\fC [read]\fP, \fC [nonatomic]\fP, \fC [assign]\fP"
Sub pixel scale factor which was passed in as part of \fBMPSCNNConvolutionDescriptor\fP when creating this \fBMPSCNNConvolution\fP object\&. 

.SH "Author"
.PP 
Generated automatically by Doxygen for MetalPerformanceShaders\&.framework from the source code\&.
