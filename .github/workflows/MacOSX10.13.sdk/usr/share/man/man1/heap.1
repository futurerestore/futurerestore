.\" Copyright (c) 2000-2016  Apple Inc. All rights reserved.
.Dd Oct. 17, 2016
.Dt "heap" 1
.Os
.Sh NAME
.Nm heap
.Nd List all the malloc-allocated buffers in the process's heap
.Sh SYNOPSIS
.Nm heap
.Op Fl s | Fl sortBySize
.Op Fl guessNonObjects
.Op Fl sumObjectFields
.Op Fl showSizes
.Op Fl addresses Ar all | Ar <classes-pattern>
.Op Fl noContent
.Ar pid | partial-executable-name | memory-graph-file
.Sh DESCRIPTION
.Nm heap 
lists the objects currently allocated on the heap of the specified process, as well as summary data.
Objects are categorized by class name, type (Objective-C, C++, or CFType), and binary image.  
C++ objects are identified by the vtable referenced from the start of the object, so with multiple
inheritance this may not give the precise class of the object.
.Pp
The binary image identified for a class is the image which implements the class, not necessarily
the binary image which caused the objects to be allocated at runtime, or which "owns" those objects.
.Pp
.Nm heap
requires one argument -- either the process ID or the full or partial executable name
of the process to examine, or the pathname of a memory graph file generated by
.Nm leaks
or the Xcode Memory Graph Debugger.
.Pp
The following options are available:
.Bl -tag -width indent
.It Fl s | Fl sortBySize
Sort output by total size of class instances, rather than by count.
.It Fl guessNonObjects
Look through the memory contents of each Objective-C object to find pointers to malloc'ed
blocks (non-objects), such as the variable array hanging from an NSArray.  These referenced
blocks of memory are identified as their offset from the start of the object (say "__NSCFArray[12]").
The count, number of bytes, and average size of memory blocks referenced from each different
object offset location are listed in the output.
.It Fl sumObjectFields
Do the same analysis as with the
.Fl guessNonObjects
option, but add the sizes of those referenced non-object fields into the entries for the corresponding objects.
.It Fl showSizes
Show the distribution of each malloc size for each object, instead of summing and averaging the sizes in a single entry.
.It Fl addresses Ar all | Ar <classes-pattern>
Print the addresses of all malloc blocks found on the heap in ascending address order, or the 
addresses of those objects whose full class name is matched by the regular expression <classes-pattern>.
The string "all" indicates that the addresses of all blocks (both objects and non-objects) should be printed.
The <classes-pattern> regular expression is interpreted as an extended (modern) regular expression as
described by the re_format(7) manual page.  Note that toll-freed-bridged CoreFoundation and Foundation
classes have the "__NSCF" prefix rather than just "NS" or "CF".  Examples of valid classes-patterns include:
.Pp
.Bl -tag -offset indent -compact
.It __NSCFString
.It 'NS.*'
.It '__NSCFString|__NSCFArray'
.It '.*(String|Array)'
.It non-object
.El
.It Fl noContent
Do not show object content in -addresses mode.
.El
.Sh SEE ALSO
.Xr malloc 3 ,
.Xr leaks 1 ,
.Xr malloc_history 1 ,
.Xr stringdups 1 ,
.Xr vmmap 1 ,
.Xr DevToolsSecurity 1
.Pp
The Xcode developer tools also include Instruments, a graphical application that can give information similar to that provided by
.Nm heap.
The Allocations instrument graphically displays dynamic, real-time
information about the object and memory use in an application, including backtraces of where the allocations
occurred.  The Leaks instrument performs memory leak analysis.
