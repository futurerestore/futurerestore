Name: CoreImage
Classes:

# CIImage

- Name: CIImage
  Methods:
  - Selector: "imageByApplyingTransform:"
    MethodKind: Instance
    SwiftName: "transformed(by:)"    
  - Selector: "imageByApplyingOrientation:"
    MethodKind: Instance
    SwiftName: "oriented(forExifOrientation:)"
  - Selector: "imageTransformForOrientation:"
    MethodKind: Instance
    SwiftName: "orientationTransform(forExifOrientation:)"
  - Selector: "imageByApplyingCGOrientation:"
    MethodKind: Instance
    SwiftName: "oriented(_:)"
  - Selector: "imageTransformForCGOrientation:"
    MethodKind: Instance
    SwiftName: "orientationTransform(for:)"
  - Selector: "imageByCompositingOverImage:"
    MethodKind: Instance
    SwiftName: "composited(over:)"
  - Selector: "imageByCroppingToRect:"
    MethodKind: Instance
    SwiftName: "cropped(to:)"
  - Selector: "imageByClampingToExtent"
    MethodKind: Instance
    SwiftName: "clampedToExtent()"
  - Selector: "imageByClampingToRect:"
    MethodKind: Instance
    SwiftName: "clamped(to:)"
  - Selector: "imageByApplyingFilter:withInputParameters:"
    MethodKind: Instance
    SwiftName: "applyingFilter(_:parameters:)"
    Parameters:
    - Position: 1
      Nullability: N
  - Selector: "imageByApplyingFilter:"
    MethodKind: Instance
    SwiftName: "applyingFilter(_:)"
  - Selector: "imageBySettingAlphaOneInExtent:"
    MethodKind: Instance
    SwiftName: "settingAlphaOne(in:)"    
  - Selector: "imageByApplyingGaussianBlurWithSigma:"
    MethodKind: Instance
    SwiftName: "applyingGaussianBlur(sigma:)"

# CIKernel

- Name: CIKernel
  Methods:
  - Selector: "kernelsWithString:"
    MethodKind: Class
    SwiftName: "makeKernels(source:)"    
  - Selector: "kernelWithString:"
    MethodKind: Class
    SwiftName: "init(source:)"
  - Selector: "applyWithExtent:roiCallback:arguments:"
    MethodKind: Instance
    SwiftName: "apply(extent:roiCallback:arguments:)"
    Parameters:
    - Position: 2
      Nullability: N

# CIColorKernel

- Name: CIColorKernel
  Methods:
  - Selector: "applyWithExtent:arguments:"
    MethodKind: Instance
    SwiftName: "apply(extent:arguments:)"
    Parameters:
    - Position: 1
      Nullability: N

# CIWarpKernel

- Name: CIWarpKernel
  Methods:
  - Selector: "applyWithExtent:roiCallback:inputImage:arguments:"
    MethodKind: Instance
    SwiftName: "apply(extent:roiCallback:image:arguments:)"
    Parameters:
    - Position: 3
      Nullability: N

# CIBlendKernel

- Name: CIBlendKernel
  Methods:
  - Selector: "applyWithForeground:background:"
    MethodKind: Instance
    SwiftName: "apply(foreground:background:)"

SwiftVersions:

- Version: 3
  Classes:

  # CIColor

  - Name: CIColor
    Properties:
    - Name: blackColor
      PropertyKind: Class
      SwiftImportAsAccessors: true
    - Name: whiteColor
      PropertyKind: Class
      SwiftImportAsAccessors: true
    - Name: grayColor
      PropertyKind: Class
      SwiftImportAsAccessors: true
    - Name: redColor
      PropertyKind: Class
      SwiftImportAsAccessors: true
    - Name: greenColor
      PropertyKind: Class
      SwiftImportAsAccessors: true
    - Name: blueColor
      PropertyKind: Class
      SwiftImportAsAccessors: true
    - Name: cyanColor
      PropertyKind: Class
      SwiftImportAsAccessors: true
    - Name: magentaColor
      PropertyKind: Class
      SwiftImportAsAccessors: true
    - Name: yellowColor
      PropertyKind: Class
      SwiftImportAsAccessors: true
    - Name: clearColor
      PropertyKind: Class
      SwiftImportAsAccessors: true

  # CIImage

  - Name: CIImage
    Methods:
    - Selector: "imageByApplyingTransform:"
      MethodKind: Instance
      SwiftName: "applying(_:)"    
    - Selector: "imageByApplyingOrientation:"
      MethodKind: Instance
      SwiftName: "applyingOrientation(_:)"
    - Selector: "imageTransformForOrientation:"
      MethodKind: Instance
      SwiftName: "imageTransform(forOrientation:)"
    - Selector: "imageByCompositingOverImage:"
      MethodKind: Instance
      SwiftName: "compositingOverImage(_:)"
    - Selector: "imageByCroppingToRect:"
      MethodKind: Instance
      SwiftName: "cropping(to:)"
    - Selector: "imageByClampingToExtent"
      MethodKind: Instance
      SwiftName: "clampingToExtent()"
    - Selector: "imageByClampingToRect:"
      MethodKind: Instance
      SwiftName: "clamping(to:)"
    - Selector: "imageByApplyingFilter:withInputParameters:"
      MethodKind: Instance
      SwiftName: "applyingFilter(_:withInputParameters:)"
      Parameters:
      - Position: 1
        Nullability: O
    - Selector: "imageBySettingAlphaOneInExtent:"
      MethodKind: Instance
      SwiftName: "settingAlphaOne(inExtent:)"    
    - Selector: "imageByApplyingGaussianBlurWithSigma:"
      MethodKind: Instance
      SwiftName: "applyingGaussianBlur(withSigma:)"

  # CIKernel

  - Name: CIKernel
    Methods:
    - Selector: "kernelsWithString:"
      MethodKind: Class
      SwiftName: "kernels(with:)"    
    - Selector: "kernelWithString:"
      MethodKind: Class
      SwiftName: "init(string:)"
    - Selector: "applyWithExtent:roiCallback:arguments:"
      MethodKind: Instance
      SwiftName: "apply(withExtent:roiCallback:arguments:)"
      Parameters:
      - Position: 2
        Nullability: O

  # CIColorKernel

  - Name: CIColorKernel
    Methods:
    - Selector: "applyWithExtent:arguments:"
      MethodKind: Instance
      SwiftName: "apply(withExtent:arguments:)"
      Parameters:
      - Position: 1
        Nullability: O

  # CIWarpKernel

  - Name: CIWarpKernel
    Methods:
    - Selector: "applyWithExtent:roiCallback:inputImage:arguments:"
      MethodKind: Instance
      SwiftName: "apply(withExtent:roiCallback:inputImage:arguments:)"
      Parameters:
      - Position: 3
        Nullability: O

  # CIBlendKernel

  - Name: CIBlendKernel
    Methods:
    - Selector: "applyWithForeground:background:"
      MethodKind: Instance
      SwiftName: "apply(withForeground:background:)"

