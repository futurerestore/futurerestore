'\" t
.\" @(#)rmic.1 1.10 00/06/13 SMI;
.\" Copyright 2004 Sun Microsystems, Inc. All rights reserved.
.\" Copyright 2004 Sun Microsystems, Inc. Tous droits réservés.
.\" 
.TH rmic 1 "23 June 2004"
.SH NAME
rmic \- Java RMI stub compiler
.\"
.\" This comment retained for historical purposes only:
.\"  This document was created by saving an HTML file as text
.\"  from the JavaSoft web site:
.\" 
.\" http://java.sun.com/products/jdk/1.2/docs/tooldocs/tools.html
.\" 
.\"  and adding appropriate troff macros.
.\" 
.SH SYNOPSIS
.B rmic 
[
.I options 
] 
.I package-qualified-class-names
.SH DESCRIPTION
.IX "Java RMI stub compiler" "" "Java RMI stub compiler \(em \fLrmic\fP"
.IX "rmic" "" "\fLrmic\fP \(em Java RMI stub compiler"
The 
.B rmic 
compiler generates stub and skeleton class 
files (JRMP protocol) and stub and tie class
files (IIOP protocol) for
remote objects. These class files are generated
from compiled Java programming language classes that
are remote object implementation classes.
A remote implementation class is a class that
implements the interface \f3java.rmi.Remote\f1. The classes named in
the 
.B rmic 
command must be for classes that have been compiled
successfully with the 
.BR javac (1) 
command and be fully package-qualified.
For example, running 
.B rmic 
on the class file name
.B HelloImpl 
as shown here:
.LP
.RS
rmic hello.HelloImpl
.RE
.LP
creates the 
.B HelloImpl_Stub.class 
file in the 
.B hello
subdirectory (named for the class's package).
.LP
A skeleton for a remote object is a JRMP
protocol server-side entity 
has a method that dispatches calls to the remote
object implementation.
.LP
A tie for a remote object is a server-side entity 
similar to a skeleton, but which communicates
with the client using the IIOP protocol. 
.LP
A stub is a proxy for a remote object that is responsible for
forwarding method invocations on remote objects to the server
where the actual remote object implementation resides. 
A client's
reference to a remote object is actually a reference
to a local stub.
.LP
By default, rmic generates stub classes that use the 
1.2 JRMP stub protocol version only, as if
the \f3\-v1.2\fP option had been specified. (Note that 
the \f3\-vcompat\fP option was the default in releases
prior to 1.5.) Use the \f3\-iiop\fP option to generate stub 
and tie classes for the IIOP protocol. 
.LP
The stub implements only the remote interfaces, not local
interfaces also implemented by the remote object. Because the
stub implements exactly the same set of remote interfaces as the
remote object, a client can use the Java language's
built-in operators for casting and type-checking.
For IIOP, the
.B PortableRemoteObject.narrow
method must be used.
.SH OPTIONS
.if t .TP 20
.if n .TP 15
.BI \-bootclasspath " path"
Overrides location of bootstrap class files.
.if t .TP 20
.if n .TP 15
.BI \-classpath " path"
Specifies the path 
.B rmic 
uses to look up classes.
Setting this option
overrides the default or the 
.SB CLASSPATH 
environment variable.
Directories are separated by colons.
Thus, the
general format for
.I path
is:
.sp 1n
.ti +5n
.BI .:< your_path >
.sp 1n
For example:
.sp 1n
.ti +5n
.B .:/usr/local/java/classes
.if t .TP 20
.if n .TP 15
.BI \-d " directory"
Specifies the root directory of the class hierarchy.
You can use this option to specify a destination
directory for the stub, skeleton, and tie files.
For example, the command
.LP
.RS 5
rmic \-d /java/classes foo.MyClass
.RE
.LP
would place the stub and skeleton classes 
derived from MyClass into the directory /java/classes/foo. 
If the \f3\-d\fP option is not specified, the default 
behavior is as if "\f3\-d\fP ."
were specified: the package hierarchy of 
the target class is created in the current
directory, and stub/tie/skeleton files are 
placed within it. (Note that in some previous
versions of rmic, if \f3\-d\fP was not specified, then 
the package hierarchy was not created, and
all of the output files were placed directly in the current directory.) 
.if t .TP 20
.if n .TP 15
.BI \-extdirs " path"
Overrides location of installed extensions.
.if t .TP 20
.if n .TP 15
.B \-g
Enables generation of all debugging information, 
including local variables. By default, only
line number information is generated. 
.if t .TP 20
.if n .TP 15
.B \-idl
Causes
.B rmic
to generate
.SM OMG IDL
for the classes specified and any classes referenced.
.SM IDL
provides a purely declarative, programming
language-independent way of specifying an object's
.SM API\s0.
The
.SM IDL
is used as a specification for methods
and data that can be written in and invoked from any
language that provides
.SM CORBA
bindings.
This includes
Java and C++ among others.
When the
.B \-idl
option is used, other options also include:
.RS
.TP 5
.BR \-always " or " \-alwaysgenerate
Forces re-generation even when existing
stubs/ties/\s-1IDL\s0 are newer than the input class.
.PD 0
.TP
.B \-factory
Uses factory keyword in generated
.SM IDL\s0.
.TP
\f3\-idlModule\fP \f2fromJavaPackage\fP[.class] \f2toIDLModule\fP
Specifies
.B IDLEntity
package mapping.
For example:
.sp 1n
.in +5n
.ft 3
.nf
\-idlModule foo.bar
my::real::idlmod.
.fi
.ft 1
.in
.sp 1n
.TP
\f3\-idlFile\fP \f2fromJavaPackage\fP[.class] \f2toIDLFile\fP
Specifies
.B IDLEntity 
file mapping.
For example:
.sp 1n
.ti +5n
.B \-idlFile test.pkg.X TEST16.idl
.RE
.PD
.if t .TP 20
.if n .TP 15
.B \-iiop
Causes
.B rmic
to generate
.SM IIOP
stub and tie classes, rather than
.SM JRMP
stub and skeleton classes.
A stub class is a local proxy for a remote object and
is used by clients to send calls to a server.
Each remote interface requires a stub class, which implements
that remote interface.
A client's reference to a remote object is actually a reference to
a stub.
Tie classes are used on the server side to process
incoming calls and dispatch the calls to the proper
implementation class.
Each implementation class requires a tie class.
.sp 1n
Invoking
.B rmic
with
.B \-iiop
generates stubs and
ties that conform to this naming convention:
.sp 1n
.in +5n
.ft 3
.nf
_<implementationName>_stub.class
.sp 1n
_<interfaceName>_tie.class
.ft 1
.fi
.in
.sp 1n
When the
.B \-iiop
option is used, other options also include:
.sp 1n
.ne 1
.bp
.RS
.PD 0
.TP 5
.BR \-always " or " \-alwaysgenerate
Forces re-generation even when existing
stubs/ties/\s-1IDL\s0 are newer than the input class.
.TP
.B \-nolocalstubs
Does not create stubs optimized for same-process
clients and servers.
.TP
.B \-noValueMethods
Must be used with the
.B \-idl
option.
Prevents addition of valuetype methods and initializers
to emitted
.SM IDL\s0.
These methods and initializers
are optional for valuetypes and are generated
unless the
.B \-noValueMethods
option is specified when using the
.B \-idl
option.
.TP
.B \-poa 
.br
Changes the inheritance from
.BR org.omg.CORBA_2_3.portable.ObjectImpl
to 
.BR org.omg.PortableServer.Servant .
.RS
.LP
The
.BR PortableServer
module for the Portable Object Adapter (POA) 
defines the native
.BR Servant 
type. In the Java programming language, the
.BR Servant
type is mapped to the Java
.BR org.omg.PortableServer.Servant
class. It server as the base class for all POA servant
implementation and provides a number of methods
that may be invoked by the application programmer, as well
as methods which are invoked by the POA itself and
may be overridden by the user to control aspects of
servant behavior. Based on the OMG IDL to Java
Language Mapping Specfication, CORBA V 2.3.1 ptc/00-01-08.pdf.
.RE
.PD
.RE
.TP 20
.if t .TP 20
.if n .TP 15
.TP
.BI \-J option
.in 27
Pass
.I option
to the Java virtual machine, where 
.I option
is one of the options described on the man page for the
java application launcher, java(1). For example,
.B \-J-Xms48m
sets the startup memory to 48 megabytes. It is a common convention for
.B \-J
to pass options to the underlying virtual machine.
.if t .TP 20
.if n .TP 15
.B \-keepgenerated
Retains the generated .java source files for the 
stub, skeleton, and/or tie classes and
writes them to the same directory as the .class files
.if t .TP 20
.if n .TP 15
.B \-nowarn
Turns off warnings. If used, the compiler does not print 
warnings.
.if t .TP 20
.if n .TP 15
.B \-vcompat
Generates stub and skeleton classes compatible 
with both the 1.1 and 1.2 JRMP stub
protocol versions. (This option was the default 
in releases prior to 1.5.) The generated stub
classes will use the 1.1 stub protocol version 
when loaded in a JDK 1.1 virtual machine
and will use the 1.2 stub protocol version when 
loaded into a 1.2 (or later) virtual
machine. The generated skeleton classes will 
support both 1.1 and 1.2 stub protocol
versions. The generated classes are relatively large 
in order to support both modes of operation. 
.if t .TP 20
.if n .TP 15
.B \-verbose
Causes the compiler and linker to display
messages about
the classes being compiled and what class files 
being loaded.
.if t .TP 20
.if n .TP 15
.B  \-v1.1
Creates stubs and skeletons for 
JDK 1.1 stub protocol version only.
Note that this option is only useful for 
generating stub classes that are serialization-compatible
with pre-existing, statically-deployed stub classes 
that were generated by the rmic tool
from JDK 1.1 and that cannot be upgraded (and dynamic 
class loading is not being used). 
.if t .TP 20
.if n .TP 15
.B  \-v1.2
(default) Generates stub classes for the 1.2 
JRMP stub protocol version only. No skeleton
classes are generated with this option because 
skeleton classes are not used with the 1.2
stub protocol version. The generated stub 
classes will not work if they are loaded into a
JDK 1.1 virtual machine. 
.SH ENVIRONMENT VARIABLES
.if t .TP 20
.if n .TP 15
.SB CLASSPATH
Used to provide the system with a path to user-defined classes.
Directories are separated by colons.
For example,
.sp 1n
.ti +5n
.B .:/usr/local/java/classes
.SH SEE ALSO
.BR java (1),
.BR javac (1)
.BR CLASSPATH
