'\" t
.\" @(#)jar.1 1.16 00/06/13 SMI;
.\" Copyright 2004 Sun Microsystems, Inc. All rights reserved.
.\" Copyright 2004 Sun Microsystems, Inc. Tous droits r\351serv\351s.
.\" `
.TH jar 1 "22 Jun 2004"
.SH NAME
jar \- Java archive tool
.\" 
.\"  This document was created by saving an HTML file as text
.\"  from the JavaSoft web site:
.\" 
.\" http://java.sun.com/j2se/1.5/docs/tooldocs/tools.html
.\" 
.\"  and adding appropriate troff macros.  Because the JavaSoft web site 
.\"  man pages can change without notice, it may be helpful to diff
.\"  files to identify changes other than new functionality. 
.\" 
.SH SYNOPSIS
Create jar file
.br
.B jar 
.BI c[v0M]f
.I jarfile
[
.BI \-C " dir"
]
.I inputfiles
[
.BI \-J option
]
.br
.B jar 
.BI c[v0]mf
.I manifest
.I jarfile
[
.BI \-C " dir"
]
.I inputfiles
[
.BI \-J option
]
.br
.B jar
.BI c[v0M]
[
.BI \-C " dir"
]
.I inputfiles
[
.BI \-J option
]
.br
.B jar
.BI c[v0]m
.I manifest
[
.BI \-C " dir"
]
.I inputfiles
[
.BI \-J option
]
.LP
Update jar file
.br
.B jar
.BI u[v0M]f
.I jarfile
[
.BI \-C " dir"
]
.I inputfiles
[
.BI \-J option
]
.br
.br
.B jar
.BI u[v0]mf
.I manifest
.I jarfile
[
.BI \-C " dir"
]
.I inputfiles
[
.BI \-J option
]
.br
.br
.B jar
.BI u[v0M]
[
.BI \-C " dir"
]
.I inputfiles
[
.BI \-J option
]
.br
.B jar
.BI u[v0]m
.I manifest
[
.BI \-C " dir"
]
.I inputfiles
[
.BI \-J option
]
.LP
Extract jar file
.br
.B jar
.BI x[v]f
.I jarfile
[
.I inputfiles
]
[
.BI \-J option
]
.br
.B jar
.BI x[v]
[
.I inputfiles
] [
.BI \-J option
]
.LP
List table of contents of jar file
.br
.B jar
.BI t[v]f
.I jarfile
[
.I inputfiles
] [
.BI \-J option
]
.br
.B jar
.BI t[v]
[
.I inputfiles
] [
.BI \-J option
]
.LP
Add index to jar file
.br
.B jar
.BI i 
.I jarfile
[
.BI \-J option
]
.SH PARAMETERS
.if t .TP 20
.if n .TP 15
.B cuxtivOMmf
Options that control the jar command.
.if t .TP 20
.if n .TP 15
.BI jarfile
Jar file to be created (c), updated (u), extracted (x), 
or have its table of
contents viewed (t). The f option and filename 
jarfile are a pair -- if either is
present, they must both appear. Note that 
omitting f and jarfile accepts a "jar
file" from standard input (for x and t) or sends 
the "jar file" to standard
output (for c and u). 
.if t .TP 20
.if n .TP 15
.BI inputfiles
Files or directories, separated by spaces, to be 
combined into jarfile (for c and
u), or to be extracted (for x) or listed (for t) 
from jarfile. All directories are
processed recursively. The files are compressed 
unless option O (zero) is used. 
.if t .TP 20
.if n .TP 15
.BI manifest
Pre-existing manifest file whose name: value pairs 
are to be included in MANIFEST.MF in the jar file. 
The m option and filename manifest are a pair --
if either is present, they must both appear. The 
letters m and f must appear
in the same order that manifest and jarfile appear. 
.if t .TP 20
.if n .TP 15
.BI \-C " dir"
Temporarily changes directories to dir while 
processing the following inputfiles argument. 
Multiple 
.BI \-C " dir" 
inputfiles sets are allowed. 
.if t .TP 20
.if n .TP 15
.BI \-J option
Option to be passed into the Java runtime environment. (There 
must be no space between -J and option). 
.SH DESCRIPTION
.IX "Java archive tool" "" "Java archive tool \(em \fLjar\fP"
.IX "jar" "" "\fLjar\fP \(em Java archive tool"
The 
.B jar 
tool combines multiple files
into a single
.SM JAR
archive file.
jar is a general-purpose archiving
and compression tool, based on
.SM ZIP
and the
.SM ZLIB
compression format.
However, 
.B jar 
was designed mainly to facilitate the
packaging of Java applets or applications into a single archive.
When the components of an applet or application (.class files,
images and sounds) are combined into a single archive, they can be
downloaded by a Java agent (like a browser) in a single
.SM HTTP
transaction, rather than require a new connection for each piece.
This dramatically improves download time. 
The
.B jar 
tool also compresses files, which further improves download time.
In addition, it allows individual entries in a file to be signed by
the applet author so that their origins can be authenticated.
The syntax for the 
.B jar 
tool is almost identical to the syntax for the
.BR tar (1)
command.
A 
.B jar
archive can be used as a class path entry,
whether or not it is compressed.
.LP
Typical usage to combine files into a jar file is: 
.LP
.RS
.ft 3
.nf
% jar cf myFile.jar *.class
.fi
.ft 1
.RE
.LP
In this example, all the class files in the current directory are
placed in the file named
.BR myjarfile .
A manifest file entry named META-INF/MANIFEST.MF 
is automatically generated by
the jar tool and is always the first entry in the jar file. 
The manifest file is the place where any
meta-information about the archive is stored
as name:value pairs.
Refer to the
Jar File specification
for details about how meta-information is
stored in the manifest file.
.LP
If you have a pre-existing manifest file whose 
name: value pairs you want the jar tool to include
for the new jar archive, you can specify it using the m option: 
.LP
.RS 5
.B % jar cmf myManifestFile myJarFile *.class
.RE
.LP
Be sure that any pre-existing manifest file that 
you use ends with a new line. The last line of a
manifest file will not be parsed if it doesn't 
end with a new line character. Note that when you
specify "cfm" instead of "cmf" (i.e., you invert the 
order of the "m" and "f" options), you need to
specify the name of the jar archive first, followed 
by the name of the manifest file: 
.LP
.RS 5
.B % jar cfm myJarFile myManifestFile *.class
.RE
.LP
The manifest is in a text format
inspired by RFC822
.SM ASCII
format, so it is easy to view and
process manifest-file contents.
.LP
To extract the files from a jar file, use
.I x ,
as in:
.LP
.RS 5
% jar xf myFile.jar
.RE
.LP
To extract only certain files from a jar file, 
supply their filenames: 
.LP
.RS 5
% jar xf myFile.jar foo bar
.RE
.LP
Beginning with version 1.3 of the Java 2 SDK, 
the jar utility supports JarIndex, which allows
application class loaders to load classes more 
efficiently from jar files. If an application or applet
is bundled into multiple jar files,  only the
necessary jar files will be downloaded and opened to
load classes. This performance optimization is 
enabled by running jar with the i option. It will
generate package location information for the specified 
main jar file and all the jar files it
depends on, which need to be specified in the 
Class-Path attribute of the main jar file's manifest. 
.LP
.RS 5
% jar i main.jar
.RE
.LP
In this example, an INDEX.LIST file is inserted into 
the META-INF directory of main.jar. 
The application class loader will use the information 
stored in this file for efficient class loading. 
Refer to the JarIndex specification for details 
about how location information is stored in the
index file. 
.LP
A standard way to copy directories is to first compress 
files in dir1 to standard out, then extract
from standard in to dir2 (omitting f from both jar commands): 
.LP
.RS 5
% (cd dir1; jar c .) | (cd dir2; jar x)
.RE
.LP
Examples of using the jar tool to operate on jar 
files and jar file manifests are provided below
and in the Jar trail of the Java Tutorial. 
.SH OPTIONS
.if t .TP 10
.if n .TP 5
.B c
Creates a new archive file named jarfile (if 
f is specified) or to standard output (if f and
jarfile are omitted). Add to it the files and 
directories specified by inputfiles. 
.if t .TP 10
.if n .TP 5
.B u
Updates an existing file jarfile (when f is specified) 
by adding to it files and directories
specified by inputfiles. For example: 
.LP
.RS 5
jar uf foo.jar foo.class
.RE
.LP
would add the file foo.class to the existing jar file 
foo.jar. The u option can also update
the manifest entry, as given by this example: 
.LP
.RS 5
jar umf manifest foo.jar
.RE
.LP
updates the foo.jar manifest with the name: value pairs in manifest. 
.if t .TP 10
.if n .TP 5
.B x
Extracts files and directories from 
jarfile (if f is specified) or standard 
input (if f and jarfile
are omitted). If inputfiles is specified, only those 
specified files and directories are
extracted. Otherwise, all files and directories are extracted. 
.if t .TP 10
.if n .TP 5
.B t
Lists the table of contents from jarfile (if f 
is specified) or standard input (if f and jarfile
are omitted). If inputfiles is specified, only 
those specified files and directories are listed.
Otherwise, all files and directories are listed. 
.if t .TP 10
.if n .TP 5
.B i
Generate index information for the specified 
jarfile and its dependent jar files. For example: 
.LP
.RS 5
jar i foo.jar
.RE
.LP
would generate an INDEX.LIST file in foo.jar which 
contains location information for each
package in foo.jar and all the jar files specified 
in the Class-Path attribute of foo.jar.
See the index example. 
.if t .TP 10
.if n .TP 5
.B f
Specifies the file jarfile to be created (c), 
updated (u), extracted (x), indexed (i), or 
viewed (t). The f option and filename jarfile are a 
pair -- if present, they must both appear.
Omitting f and jarfile accepts a "jar file" from standard 
input (for x and t) or sends the "jar
file" to standard output (for c and u). 
.if t .TP 10
.if n .TP 5
.B v
Generates verbose output to standard output. Examples shown below. 
.if t .TP 10
.if n .TP 5
.B 0
Zero. Store without using ZIP compression.
.if t .TP 10
.if n .TP 5
.B M
Do not create a manifest file entry (for c and u), or 
delete a manifest file entry if one exists (for u). 
.if t .TP 10
.if n .TP 5
.B m
Includes name: value attribute pairs from the specified 
manifest file manifest in the file
at META-INF/MANIFEST.MF. A name: value pair is added 
unless one already exists with the
same name, in which case its value is updated. 
.LP
On the command line, the letters m and f must 
appear in the same order that manifest
and jarfile appear. Example use: 
.LP
.RS 5
jar cmf myManifestFile myFile.jar *.class
.RE
.LP
You can add special-purpose name: value attribute pairs 
to the manifest that aren't
contained in the default manifest. Examples of such 
attributes would be those for vendor
information, version information, package sealing, and 
to make JAR-bundled applications
executable. See the JAR Files trail in the Java 
Tutorial and the Notes for Developers page for
examples of using the m option. 
.if t .TP 10
.if n .TP 5
.B \-C
Temporarily changes directories (cd dir) during 
execution of the jar command while
processing the following inputfiles argument. Its 
operation is intended to be similar to the
.B \-C 
option of the UNIX tar utility.
For example:
.LP
.if t .RS 15
.if n .RS 8
.ft 3
% jar uf foo.jar \-C classes bar.classes
.ft 1
.RE
.LP
would change to the classes directory and add 
the bar.class from that directory to
foo.jar. The following command, 
.LP
.if t .RS 15
.if n .RS 8
.ft 3
jar uf foo.jar -C classes . -C bin xyz.class
.ft 1
.RE
.LP
would change to the classes directory and add to foo.jar 
all files within the classes directory (without creating 
a classes directory in the jar file), then change back to the
original directory before changing to the bin directory 
to add xyz.class to foo.jar. If
classes holds files bar1 and bar2, then here's what 
the jar file would contain using jar tf foo.jar: 
.LP
.if t .RS 15
.if n .RS 8
.ft 3
.nf
META-INF/
META-INF/MANIFEST.MF
bar1
bar2
xyz.class
.fi
.ft 1
.RE
.if t .TP 10
.if n .TP 5
.BI J option
Pass
.I option
to the Java runtime environment, where 
.I option
is one of the options described on the man page for the
.B java 
application launcher, 
.BR java (1). 
For example,
.B \-J-Xms48m
sets the startup memory to 48 megabytes. It is a common convention for
.B \-J
to pass options to the underlying virtual machine.
.SH COMMAND LINE ARGUMENT FILES
To shorten or simplify the jar command line, you can 
specify one or more files that themselves
contain arguments to the jar command (except \f3-J\fR options). 
This enables you to create jar
commands of any length, overcoming command line limits imposed 
by the operating system. 
.LP
An argument file can include options and 
filenames. The arguments within a file can be
space-separated or newline-separated. Filenames 
within an argument file are relative to the
current directory, not the location of the 
argument file. Wildcards (*) that might otherwise be
expanded by the operating system shell are not 
expanded. Use of the '@' character to recursively
interpret files is not supported. The -J options 
are not supported because they are passed to the
launcher, which does not support argument files. 
.LP
When executing jar, pass in the path and name of each 
argument file with the '@' leading
character. When jar encounters an argument beginning 
with the character `@', it expands the
contents of that file into the argument list. 
.LP
For example, you could use a single argument file 
named "classes.list" to hold the names of the files: 
.LP
.RS 5
% find . -name '*.class' -print > classes.list
.RE
.LP
Then execute the jar command passing in the argfile: 
.LP
.RS 5
% jar cf my.jar @classes.list
.RE
.LP
An argument file can be passed in with a path, but 
any filenames inside the argument file that
have relative paths are relative to the current 
working directory, not the path passed in. Here's
such an example: 
.LP
.RS 5
% jar @path1/classes.list
.RE
.SH EXAMPLES
To add all the files in a particular directory to an 
archive (overwriting contents if the archive
already exists). Enumerating verbosely (with the "v" 
option) will tell you more information about
the files in the archive, such as their size and last modified date. 
.RS 
\f3
.nf
% ls
1.au          Animator.class    monkey.jpg
2.au          Wave.class        spacemusic.au
3.au          at_work.gif
% jar cvf bundle.jar *
added manifest
adding: 1.au(in = 2324) (out= 67)(deflated 97%)
adding: 2.au(in = 6970) (out= 90)(deflated 98%)
adding: 3.au(in = 11616) (out= 108)(deflated 99%)
adding: Animator.class(in = 2266) (out= 66)(deflated 97%)
adding: Wave.class(in = 3778) (out= 81)(deflated 97%)
adding: at_work.gif(in = 6621) (out= 89)(deflated 98%)
adding: monkey.jpg(in = 7667) (out= 91)(deflated 98%)
adding: spacemusic.au(in = 3079) (out= 73)(deflated 97%)
\f1
.fi
.RE
If you already have separate subdirectories for 
images, audio files and classes, you can combine
them into a single jar file: 
.RS 
\f3
.nf
% ls -F
audio/ classes/ images/

% jar cvf bundle.jar audio classes images
added manifest
adding: audio/(in = 0) (out= 0)(stored 0%)
adding: audio/1.au(in = 2324) (out= 67)(deflated 97%)
adding: audio/2.au(in = 6970) (out= 90)(deflated 98%)
adding: audio/3.au(in = 11616) (out= 108)(deflated 99%)
adding: audio/spacemusic.au(in = 3079) (out= 73)(deflated 97%)
adding: classes/(in = 0) (out= 0)(stored 0%)
adding: classes/Animator.class(in = 2266) (out= 66)(deflated 97%)
adding: classes/Wave.class(in = 3778) (out= 81)(deflated 97%)
adding: images/(in = 0) (out= 0)(stored 0%)
adding: images/monkey.jpg(in = 7667) (out= 91)(deflated 98%)
adding: images/at_work.gif(in = 6621) (out= 89)(deflated 98%)

% ls -F
audio/ bundle.jar classes/ images/
.fi
\f1
.RE
To see the entry names in the 
jarfile, use the 
.B t 
option:
.RS 
\f3
.nf
% jar tf bundle.jar
META-INF/
META-INF/MANIFEST.MF
audio/1.au
audio/2.au
audio/3.au
audio/spacemusic.au
classes/Animator.class
classes/Wave.class
images/monkey.jpg
images/at_work.gif
.fi
\f1
.RE
To add an index file to the jar file for speeding 
up class loading, use the "i" option. 
.LP
Let's say you split the inter-dependent classes 
for a stock trade application, into
three jar files: main.jar, buy.jar, and sell.jar. 
If you specify the Class-path
attribute in the main.jar manifest as: 
.LP
.RS 5
Class-Path: buy.jar sell.jar
.RE
.LP
then you can use the i option to speed up 
your application's class loading time:
.LP
.RS 5
% jar i main.jar
.RE
.LP
An INDEX.LIST file is inserted to the META-INF 
directory which will enable the
application class loader to download the 
specified jar files when it is searching for
classes or resources. 
.SH SEE ALSO
.LP
.TP 2
\f2The JAR Overview\fP @
http://java.sun.com/javase/6/docs/technotes/guides/jar/jarGuide.html
.LP
.TP 2
\f2The JAR File Specification\fP @
http://java.sun.com/javase/6/docs/technotes/guides/jar/jar.html
.LP
.TP 2
\f2The JARIndex Spec\fP @
http://java.sun.com/javase/6/docs/technotes/guides/jar/jar.html
.LP
.TP 2
\f2JAR Tutorial\fP @
http://java.sun.com/docs/books/tutorial/jar/
.LP
.TP 2
\f2pack200 Reference Page\fP @
http://java.sun.com/javase/6/docs/technotes/tools/share/pack200.html

