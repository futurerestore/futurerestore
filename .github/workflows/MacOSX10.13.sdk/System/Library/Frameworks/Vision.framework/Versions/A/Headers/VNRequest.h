//
//  VNRequest.h
//  Vision
//
//  Copyright Â© 2017 Apple Inc. All rights reserved.
//

#import <Foundation/Foundation.h>
#import <Metal/Metal.h>
#import <Vision/VNObservation.h>


NS_ASSUME_NONNULL_BEGIN



/*!
 @header VNRequest The VNRequest class is at the heart of the Vision framework as it describes the task to be performed and is the recipient of the observation results.
 */
@class VNRequest;

/*!
 @abstract A block that is executed at the completion of a request.
 @param request The VNRequest that has been completed.
 @param	error The error that caused the request to fail, or nil if completed successfully.
 */
typedef void (^VNRequestCompletionHandler)(VNRequest *request, NSError * _Nullable error);


/*!
@class VNRequest
@abstract VNRequest objects describe the operation to be performed as well as act as the receipient of the operation's resultant observations.
 
@discussion VNRequest objects are instantiated in a pre-configured nominal state.  For more advanced operation, their properties can be modified prior to being performed.  The VNRequest class itself acts as a base class and is not meant to be directly instantiated.
*/
API_AVAILABLE(macos(10.13), ios(11.0), tvos(11.0))
@interface VNRequest : NSObject <NSCopying>


/*!
 @abstract Creates a new VNRequest with no completion handler.
*/
- (instancetype) init;


/*!
 @abstract Creates a new VNRequest with an optional completion handler.

 @param completionHandler	The block to be invoked after the request has completed its processing.  The thread of execution in which this block is invoked is internal to the Vision framework and should not be relied upon by the client.
*/
- (instancetype) initWithCompletionHandler:(nullable VNRequestCompletionHandler)completionHandler NS_DESIGNATED_INITIALIZER;


/*!
 @abstract A hint used to minimize the request's memory and processing footprint as well as its impact on the CPU and/or GPU as much as possible while sacrificing performance. Use this when you need to make sure that for instance your UI updates and rendering are not getting blocked by Vision processing.
*/
@property (readwrite, nonatomic, assign) BOOL preferBackgroundProcessing;


/*!
 @abstract When being performed, a request requiring GPU capabilities will select a default Metal context to use. Providing a non-nil MTLDevice protocol implementing object will allow for explicit control over which GPU is to be used. Keep in mind that not all requests perform on the GPU. Rectangle detection and registration for example are purely CPU based.
*/
@property (readwrite, nonatomic, retain, nullable) id<MTLDevice> preferredMetalContext;


/*!
 @property results
 @abstract The collection of VNObservations generated by the processing of the request.
 @discussion The only valid time to access this property is after the request has been processed by a request handler.  If the request failed, this property will be nil; otherwise, it will be an array of zero or more VNObservation subclasses specific to the VNRequest subclass.
 */
@property (readonly, nonatomic, copy, nullable) NSArray *results;


/*!
 @property completionHandler
 @abstract The completion handler block that will be invoked after the request has completed processing.
 */
@property (readonly, nonatomic, copy, nullable) VNRequestCompletionHandler completionHandler;


@end




/*!
	@brief A request that will process the contents of a reference image.
*/
API_AVAILABLE(macos(10.13), ios(11.0), tvos(11.0))
@interface VNImageBasedRequest : VNRequest

/*!
	@brief The region of the image in which the request will be performed.  The rectangle is normalized to the dimensions of the image being processed and has its origin specified relative to the image's lower-left corner.
	
	@discussion The default value for this property is { { 0, 0 }, { 1, 1 } }.  Any attempt to set this property to a rectangle that is outside of the normalized coordinate space will be ignored, but zero-dimensioned rectangles will be accepted.
*/
@property (readwrite, nonatomic, assign) CGRect regionOfInterest;

@end




NS_ASSUME_NONNULL_END


